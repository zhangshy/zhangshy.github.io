<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[张帅依的博客]]></title>
  <link href="http://zhangshy.github.io/atom.xml" rel="self"/>
  <link href="http://zhangshy.github.io/"/>
  <updated>2014-07-25T17:01:22+00:00</updated>
  <id>http://zhangshy.github.io/</id>
  <author>
    <name><![CDATA[张帅依]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/24/pythonxue-xi/"/>
    <updated>2014-07-24T16:15:52+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/24/pythonxue-xi</id>
    <content type="html"><![CDATA[<h3>print</h3>

<p>格式化输出，可以结合format格式化输出，end=&ldquo; &rdquo; 参数可以改变单次print的结束</p>

<pre><code>a=10
b=12
print("0x{0:02x}+0x{1:x}={2}".format(a, b, a+b))
print("0x%02x+0x%x=%d" % (a, b, a+b))
输出相同：0x0a+0xc=22
</code></pre>

<p>%% 百分号标记     <br/>
%c 字符及其ASCII码    <br/>
%s 字符串     <br/>
%d 有符号整数(十进制)     <br/>
%u 无符号整数(十进制)     <br/>
%o 无符号整数(八进制)     <br/>
%x 无符号整数(十六进制)   <br/>
%X 无符号整数(十六进制大写字符)   <br/>
%e 浮点数字(科学计数法)   <br/>
%E 浮点数字(科学计数法，用E代替e)     <br/>
%f 浮点数字(用小数点符号)     <br/>
%g 浮点数字(根据值的大小采用%e或%f)   <br/>
%G 浮点数字(类似于%g)     <br/>
%p 指针(用十六进制打印值的内存地址)   <br/>
%n 存储输出字符的数量放进参数列表的下一个变量中</p>

<h3>字典</h3>

<pre><code>headers = {'User-agent':'Mozilla/5.0',
       'cache-control':'no-cache',
       'accept':'*/*'}
for k, v in headers.items():
    print(k, v)
</code></pre>

<p>输出</p>

<pre><code>User-agent Mozilla/5.0
cache-control no-cache
accept */*
</code></pre>

<h3>chr hex ord</h3>

<p>ord返回字符的ASCII  print(ord(&lsquo;a&rsquo;)) 输出97    <br/>
chr返回字符 print(chr(97))  输出a     <br/>
hex返回16进制   print(hex(97))  输出0x61</p>

<pre><code>f=open('xxx.ts', 'r', encoding="ISO-8859-1")
context = f.read()
buf = [ord(i) for i in context]
</code></pre>

<h3>字符串操作</h3>

<h4>查找</h4>

<p>find和index，使用index未找到字符串会抛出异常，find不抛异常只是返回-1。</p>

<pre><code>index1 = str.find("xx")
index2 = str.find("xxx", index1)#从第index1位置开始查找
</code></pre>

<h4>复制</h4>

<p>str2 = str[index1: index2]</p>

<h3>时间</h3>

<p>获取当前时间localtime，格式化时间strftime</p>

<pre><code>import time
print(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
输出2014-07-24 19:13:43
</code></pre>

<h3>文件操作</h3>

<p>os.access可以判断文件是否存在，os.mkdir创建文件夹</p>

<pre><code>if not os.access(filePath, os.R_OK):
    print("目录不存在")
    os.mkdir(filePath, mode=0o777)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ts流]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/22/tsliu/"/>
    <updated>2014-07-22T09:08:51+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/22/tsliu</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/liuhongxiangm/article/details/8981032">TS详解</a></p>

<h3>整体描述</h3>

<p>ts整包长度为<font color="red">188</font>,前4字节为包头。</p>

<table class="table table-bordered table-striped table-condensed">
<thead>
 <tr>
    <th>同步字节</th>
    <th>传输错误指示</th>
    <th>开始指示</th>
    <th>传输优先级</th>
    <th>PID</th>
    <th>加扰控制</th>
    <th>适配域控制</th>
    <th>连续性计数器</th>
 </tr>
 </thead>
 <tbody>
 <tr>
    <td>8</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>13</td>
    <td>2</td>
    <td>2</td>
    <td>4</td>
 </tr>
 </tbody>
</table>


<p>sync_byte （同步字节）：固定为0100 0111(0x47)；该字节由解码器识别，使包头和有效负载可相互分离,MPEG-2解码器接收到MPEG-2 TS流时，首先检测包结构，在TS流中查找同步字节：</p>

<pre><code>总是OX47，总位于TS包开始位置，固定间隔为188字节。同时满足这两个条件，可以确定同步。
如果出现一个字节为47hex(OX47)，解码器将检测这个字节前后n倍188字节的位置是否也是同步字节。
如果是，则当前字节为同步字节；
否则，当前字节只是码流中偶尔出现的47hex，不是同步字节
</code></pre>

<p>Table ID长度为8bit</p>

<pre><code>47  48  04  17  00  80  70 ...
同步字节：0x47
PID：0x804
Table ID：0x80
</code></pre>

<h3>各表</h3>

<pre><code>PAT表PID：0,Table ID：0,包含PMT信息
CAT表PID：1,Table ID：1,包含CA的EMM信息
PMT表PID从PAT中获取，Table ID：2,包含音视频和CA的ECM信息
NIT表PID：0x10,Table ID：0x40、0x41，描述了各个频点、符号率和调制方式。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git使用]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/21/gitshi-yong/"/>
    <updated>2014-07-21T11:48:05+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/21/gitshi-yong</id>
    <content type="html"><![CDATA[<h3>在git status时显示与origin/master的比较</h3>

<p>在git status时显示Your branch is ahead of &lsquo;origin/master&rsquo; by 1 commit</p>

<pre><code>git branch --set-upstream master  origin/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/21/cyu-yan-xue-xi/"/>
    <updated>2014-07-21T10:30:30+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/21/cyu-yan-xue-xi</id>
    <content type="html"><![CDATA[<h3>VA_ARGS</h3>

<p>可变参数宏，如果可变参数被忽略或为空, ‘##’操作将使预处理器(preprocessor)去除掉它 前面的那个逗号</p>

<pre><code>#define dePrintf(X,...) printf("[%s %s: %d]" X, __FILE__, __func__, __LINE__, ##__VA_ARGS__)
</code></pre>

<h3>cpp引用c函数库</h3>

<pre><code>#ifdef __cplusplus
extern "C"{
#endif
/* c++引用C，将#include "x264.h"放到extern "C" 中 */
#include "x264.h"
#ifdef __cplusplus
}
#endif
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Jni编写]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/14/android-jnibian-xie/"/>
    <updated>2014-07-14T11:26:26+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/14/android-jnibian-xie</id>
    <content type="html"><![CDATA[<h3>java文件编写</h3>

<pre><code>package com.example.jni

public class Testjni {
    public native int jniRead(byte[] data, int len);
    public native int jniWrite(byte[] data, int len);
    static {
        System.loadLibrary("myJni");
    }
}
</code></pre>

<h3>jni文件编写</h3>

<p>jni文件的函数名要和java中的方法名对应起来，在jni中申请的空间要注意释放。</p>

<pre><code>#include &lt;jni.h&gt;
#include &lt;android/log.h&gt;

#define LOG_TAG "myJni.c"
#define LOGI(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA__ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA__ARGS__)

jint Java_com_example_jni_jniRead(JNIEnv *env, jobject thiz,
    jbyteArray receiveBuf, jint slen) {
    uint8_t p_recv_buf[256] = {0};
    int len = slen;
    len = read(fd, p_recv_buf, slen);
    LOGI("rea len:%d\n", len);
    (*env)-&gt;setByteArrayRegion(env, receiveBuf, 0, len,
        (const jbyte*)p_recv_buf);
    return len;
}

jint Java_com_example_jni_jniWrite(JNIEnv *env, jobject thiz,
    jbyteArray sendBuf, jint len) {
    //申请空间
    jbyte *sendelems = (*env)-&gt;GetByteArrayElements(env, sendBuf, NULL);
    ...//处理函数
    //释放
    (*env)-&gt;ReleaseByteArrayElements(env, sendBuf, sendelems, 0);
    return 0;
}
</code></pre>

<h3>Android.mk</h3>

<pre><code>LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_MODULE_TAGS := optional
LOCAL_SRC_FILES:= \
    myJni.c
LOCAL_LDLIBS := -llog

LOCAL_SHARED_LIBRARIES += libam_adp liblog libcutils
LOCAL_C_INCLUDES += ../inc
#编译生成libmyJni.so
LOCAL_MODULE := libmyJni
#编译动态库
#include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>执行mm编译。（菜鸟级别解释：:=是赋值的意思，+=是追加的意思，$是引用某变量的值）补充说明：BUILD_EXECUTABLE表示以一个可执行程序的方式进行编译，include $(BUILD_PACKAGE)则是编译出一个apk，include $(BUILD_STATIC_JAVA_LIBRARY)则是编译出jar包。</p>

<h4>LOCAL_MODULE_TAGS说明</h4>

<p>LOCAL_MODULE_TAGS ：=user eng tests optional  <br/>
user: 指该模块只在user版本下才编译    <br/>
eng: 指该模块只在eng版本下才编译      <br/>
tests: 指该模块只在tests版本下才编译      <br/>
optional:指该模块在所有版本下都编译   <br/>
我一般都使用optional</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux驱动]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/09/linuxqu-dong/"/>
    <updated>2014-07-09T16:08:06+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/09/linuxqu-dong</id>
    <content type="html"><![CDATA[<h3>交叉编译</h3>

<p>编译ko文件</p>

<pre><code>Makefile:
PWD=$(shell pwd)
KDIR=/xx/xx/linux-3.4

obj-m+=scr.o
scr-objs := file1.o file2.o test-scr.o

build:
    $(MAKE) -C $(KDIR) M=$(PWD)

clean:
    @rm -rf *.o *.ko *.cmd *.mod.c *.order *.symvers *.tmp_versions *~
</code></pre>

<p>执行编译：</p>

<pre><code>make ARCH=arm CROSS_COMPILE=/xx/xx/arm-linux-gnueabi-
</code></pre>

<h3>创建设备</h3>

<p>class_create和device_create函数，在/dev下创建设备节点</p>

<pre><code>int my_device_major = register_chrdev(0, "myDevice", &amp;my_device_fops);
struct class* my_device_class = class_create(THIS_MODULE, "myDevice");
//在/sys/class下创建了myDevice目录
if (IS_ERR(my_device_class))
    return -1;
device_create(my_device_class, NULL, MKDEV(my_device_major, 0), NULL, "myDevice");
//在/dev下创建myDevice设备
</code></pre>

<h3>自旋锁spinlock_t</h3>

<p>spin_lock_irqsave会关闭中断</p>

<pre><code>spinlock_t rx_slock;
spin_lock_init(&amp;rx_slock);  //初始化
/* 使用 */
unsigned long flags;
spin_lock_irqsave(&amp;rx_slock, flags);
...
//处理
...
spin_unlock_irqrestpre(&amp;rx_slock, flags);
</code></pre>

<h3>poll</h3>

<h4>驱动poll_wait</h4>

<pre><code>wait_queue_head_t rd_wq;
init_waitqueue_head(&amp;rd_wq);

unsigned int test_poll(struct file *filp, struct poll_table_struct *wait){
    unsigned int ret = 0;
    poll_wait(filp, &amp;rd_wq, wait);
    ...//处理
    if (hasData) ret |= POLLIN|POLLRDNORM;
    return ret;
}

当收到数后：wake_up_interruptible(&amp;rd_wq);
</code></pre>

<h4>应用poll</h4>

<pre><code>int fd = open("/dev/xxx", O_RDWR);
uint32_t timeout = xxxxx;
struct pollfd pfd;
pfd.fd = fd;
pfd.events = POLLIN;
ret = poll(&amp;pfd, 1, timeout);
if (ret!=1)
    return -1;
ret = read(fd, (void*)data, *size);
</code></pre>

<h3>workqueue工作队列在中断中使用</h3>

<p>使用：在有大量的中断处理中，需要紧急处理的中断直接在中断处理函数中进行，可以延迟处理的中断放到了workqueue中做，（不知这样对不对，我看网上还有一种tasklet）。workqueue的使用：</p>

<pre><code>struct work_struct device_work;
struct workqueue_struct *device_wq;

void device_work_func(struct work_struct *work) {
    ...//处理中断的函数
}
//中断回调函数
irqreturn_t device_irq_service(int irqno, void *dev_id) {
    unsigned int temp;
    unsinged long flags;
    //加锁
    spin_lock_irqsave(&amp;rx_slock, flags);
    temp = my_get_device_interrupt_status();//一般都可以从寄存器中读到中断状态
    if (temp&amp;MY_DEVICE_IMMEDIATE) { //需要立即处理的紧急中断
        ...//中断处理
    } else {
        queue_work(device_wq, &amp;device_work);
    }
    spin_unlock_irqrestpre(&amp;rx_slock, flags);
}

//初始化
device_wq = create_singlethread_workqueue("device_wq");//只创建一个内核线程
INIT_WORK(&amp;device_work, device_work_func);
request_irq(my_irq_no, device_irq_service, 0, "my_device", NULL);//注册中断服务
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[智能卡]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/04/zhi-neng-qia/"/>
    <updated>2014-07-04T10:43:41+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/04/zhi-neng-qia</id>
    <content type="html"><![CDATA[<h3>智能卡ATR</h3>

<p>一般来说只要VCC上电CLK有时钟（电压要对应，data保持上拉），这时只用给RST持续一段时间的低电平，智能卡就会主动回复ATR。智能卡可以直接使用5V供电，目前还没遇到过只工作在3V的卡，一般工作电压在2.7-5.5V，但遇到过工作电压是4.75-5.25V的卡。  <br/>
ATR最长33字节，ATR的各数据位之间可能也有一段的时间间隔，这些在7816协议中都有规定。读ATR可以采用两种方式：按照协议边分析边读，这样按照协议读数结束就可以return了;也可以不管协议直接读，ATR中两个字节之间的间隔最长可以是9600etu，超时就认为ATR结束了。</p>

<h3>反向</h3>

<p>像NDS的卡数据是反向，可通过ATR第一个字节看出，一般判断0x03或0x3f为反向卡。反向指高低位倒过来，再取反(软件取反的话，可以通过查表的方式)</p>

<pre><code>0x03
0 0 0 0 0 0 1 1 先高低倒过来
1 1 0 0 0 0 0 0 再取反
0 0 1 1 1 1 1 1 0x3f
</code></pre>

<h3>数据传输</h3>

<p>一般来说传输一个字符要12个etu=1 START + 8 DATA + 1 PARITY + 2 GUARD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/02/linux-xue-xi/"/>
    <updated>2014-07-02T23:00:20+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/02/linux-xue-xi</id>
    <content type="html"><![CDATA[<h4>vim</h4>

<p>:vsplit 将窗口分成两个，ctrl+w切换<br/>
:edit 打开文件<br/>
:%!xxd -g 1 ：切换成十六进制的一个字节的模式  <br/>
u 撤销上一步的操作<br/>
ctrl+r 恢复上一步被撤销的操作 <br/>
shift+8 查找当前单词  <br/>
ggVG 全选 <br/>
q: 进入命令历史编辑   <br/>
vim xxx +N  打开文件并跳到第N行  <br/>
vim -d xx xxx 等同于 vimdiff xx xxx   <br/>
:set noro   取消只读，在git difftool时很有用  <br/>
dp将当前光标内容复制到另一窗口，do将另一窗口内容复制过来</p>

<h4>tar</h4>

<p>查看内容不解压：tar tvf xxx.tar.gz<br/>
解压：tar -xzvf xxx.tar.gz<br/>
解压到指定目录：tar -xzvf xxx.tar.gz -C /XX/XXX   <br/>
压缩：tar -czvf xxx.tar.gz xxx/   <br/>
解压：tar -xjvf xxx.tar.bz2</p>

<h4>mount</h4>

<p>mount后让普通用户有读写权限，加参数-o umask=000</p>

<pre><code>sudo mount /dev/sdb1 /mnt/ -o umask=000
</code></pre>

<p>挂载linux网络设备</p>

<pre><code>mount -t nfs -o nolock 192.168.0.188:/share /mnt
</code></pre>

<h4>pkg-config</h4>

<pre><code>查看头文件：pkg-config --cflags opencv
查找库文件：pkg-config --libs opencv
查看版本： pkg-config --modversion opencv
</code></pre>

<h4>cp</h4>

<p>连带目录一起复制： cp &ndash;parents -r xx/xx/xx/ xx/</p>

<h3>sed</h3>

<p>&lsquo;-i&#8217;使修改生效<br/>
a. 将old替换为new： sed &rsquo;s/old/new/g&rsquo; file -i<br/>
b. 删除第四行： sed &lsquo;4 d&rsquo; file<br/>
c. 在第三行后添加一行： sed &lsquo;3 a xxx&rsquo; file<br/>
d. 在第三行前添加一行： sed &lsquo;3 i xxx&rsquo; file</p>

<h3>find和grep</h3>

<p>在.c文件中查找东西：find -name &lsquo;*.c&rsquo; | xargs grep &lsquo;xxx&rsquo;</p>

<h3>gcc编译时指定小端-EL</h3>

<p>mips-linux-gnu-gcc -g -O2 -Wall -EL test.c</p>

<h3>watch</h3>

<p>检测一个命令的运行结果，默认2S间隔重复运行命令，用-n参数指定时间间隔: watch
free</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/02/androidxue-xi/"/>
    <updated>2014-07-02T14:35:05+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/02/androidxue-xi</id>
    <content type="html"><![CDATA[<h2>包属性</h2>

<h3>sharedUserId</h3>

<p>使用sharedUserId属性时取值需要包含点（dot），如android:sharedUserId=&ldquo;test&#8221;安装时会提示：Failure [INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID]。使用android:sharedUserId=&#8221;zsy.test&#8221;就可以了。</p>

<h2>Handler和HandlerThread</h2>

<p>Handler会关联一个单独的线程和消息队列。Handler默认关联主线程，会在主线程执行，如果在这里面的操作会有阻塞，界面也会卡住。如果要在其他线程执行，可以使用HandlerThread</p>

<pre><code>HandlerThread mHandlerThread = new HandlerThread("test");
mHandlerThread.start();
Handler mHandler = new Handler(mHandlerThread.getLooper()) {
    public void handlerMessage(Message msg) {
        XXX
    }
};
</code></pre>

<p>当要停止mHandlerThread时可执行：</p>

<pre><code>mHandlerThread.quit();
</code></pre>

<h2>Thread和Runnable</h2>

<p><a href="http://developer.51cto.com/art/201203/321042.htm">Java中Runnable和Thread的区别</a></p>

<p>在java中可有两种方式实现多线程，一种是继承Thread类，一种是实现Runnable接口；Thread类是在java.lang包中定义的。一个类只要继承了Thread类同时覆写了本类中的run()方法就可以实现多线程操作了，但是一个类只能继承一个父类，这是此方法的局限</p>

<p>在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：1.避免点继承的局限，一个类可以继承多个接口;2.适合于资源的共享</p>

<pre><code>package org.demo.runnable;  
class MyThread implements Runnable{  
    private int ticket=10;  
    public void run(){  
        for(int i=0;i&lt;20;i++){  
            if(this.ticket&gt;0){  
                System.out.println("卖票：ticket"+this.ticket--);  
            }  
        }  
    }  
}  
package org.demo.runnable;  
public class RunnableTicket {  
    public static void main(String[] args) {  
        MyThread mt=new MyThread();  
        new Thread(mt).start();//同一个mt，但是在Thread中就不可以，如果用同一  
        new Thread(mt).start();//个实例化对象mt，就会出现异常  
        new Thread(mt).start();  
    }  
}; 
</code></pre>

<h2>Button</h2>

<p>使用Button的时候可以这么用：</p>

<pre><code>public class MainActivity extends Activity implements View.OnClickListener {
    ...
    Button btn_ok = (Button) findViewById(R.id.btn_ok);
    btn_ok.setOnClickListener(this);
}
</code></pre>

<p>实现onClick(View v)方法，而且费时的按键响应操作使用Handler做</p>

<pre><code>public void onClick(View v) {
    switch(v.getId()) {
    case R.id.btn_ok:
        Message m = new Message();
        m.what = XXXX;
        Bundle data = new Bundle();
        data.putString(XXX, XXXXX);
        m.setData(data);
        mHandler.sendMessage(m);
        break;
    }
}
</code></pre>

<p>mHandler的写法</p>

<pre><code>private Handler mHandler = new Handler() {
    public void handleMessage(Message msg) {
        switch(msg.what) {
        case XXX:
            String str = msg.getData().getString(XXX);
            break;
        }
    }
}
</code></pre>

<h2>像素</h2>

<p><a href="http://www.cnblogs.com/bjzhanghao/archive/2012/11/06/2757300.html">px、dp和sp，这些单位有什么区别？</a><br/>
px指屏幕上物理像素点，不建议使用;
   因为100px的图片在不同手机上显示的实际大小可能不同</p>

<pre><code>You would use:    
    sp for font sizes
    dip for everything else.    
    dip==dp
</code></pre>

<h2>adb及常用调试指令</h2>

<p>开启adb功能：start adbd   <br/>
查看设备：adb devices     <br/>
多于一个设备时指定设备：adb -s 192.168.11.84:5555 shell     <br/>
启动应用某界面：am start com.example.test/.MainActivity   <br/>
命令行安装应用：pm install xxx.apk    <br/>
命令行卸载应用：pm uninstall com.example.test</p>

<h2>分析工具dumpsys</h2>

<p>dumpsys用来给出android应用程序的信息：</p>

<pre><code>dumpsys [Option]
        meminfo 内存信息
        cpuinfo cpu信息
        等很多选项
service list可以列出服务
</code></pre>

<h3>mat使用</h3>

<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-ecl-ma/index.html">安装配置</a>   <br/>
<a href="http://stackoverflow.com/questions/3999087/how-to-enable-heap-updates-on-my-android-client">How to enable Heap updates on my android client</a></p>

<h2>签名文件</h2>

<p>生成签名文件</p>

<pre><code>keytool -genkey -alias sign.keystore -keyalg RSA -validity 20000 -keystore sign.keystore
</code></pre>

<p>签名</p>

<pre><code>jarsigner -verbose -keystore sign.keystore -signedjar xxx_signed.apk xxx.apk sign.keystore
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Usb Host]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/01/android-usb-host/"/>
    <updated>2014-07-01T14:18:15+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/01/android-usb-host</id>
    <content type="html"><![CDATA[<h3>1. 检查系统是否开启了usb host功能</h3>

<pre><code>  确认/system/etc/permissions目录有android.hardware.usb.host.xml这个文件。
</code></pre>

<h3>2. 查找设备</h3>

<pre><code>在AndroidManifest.xml中添加：
&lt;intent-filter&gt;
    &lt;action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" /&gt;
&lt;/intent-filter&gt;
&lt;meta-data android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"
android:resource="@xml/device_filter" /&gt;
</code></pre>

<p>res/xml/device_filter.xml的内容如下，注意为10进制数</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;usb-device vendor-id="1234" product-id="5678" class="255" subclass="66" protocol="1" /&gt;
&lt;/resources&gt;
</code></pre>

<h4>方法1</h4>

<pre><code>在&lt;activity ...&gt;&lt;/activity&gt;之间加intent-filter之间，这样当USB设备插入时会启动这个Activity，通过
UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);获取设备
</code></pre>

<h4>方法2</h4>

<p>不用系统的广播的话，可以遍历设备列表，得到设备</p>

<pre><code>UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);
...
HashMap&lt;String, UsbDevice&gt; deviceList = manager.getDeviceList();
Iterator&lt;UsbDevice&gt; deviceIterator = deviceList.values().iterator();
while(deviceIterator.hasNext()){
    UsbDevice device = deviceIterator.next()
    //查找想要的设备
    if (device.getVenderId()==venderID &amp;&amp; device.getProductId==productId)
        //your code
}
</code></pre>

<p>通过UsbManager的requestPermission方法申请usb权限
manager.requestPermission(device, null);会弹出选择框让用户选择是否允许应用访问usb设备。</p>

<h3>3. 通信</h3>

<p>官网例子</p>

<pre><code>private Byte[] bytes
private static int TIMEOUT = 0;
private boolean forceClaim = true;
...
UsbInterface intf = device.getInterface(0);
UsbEndpoint endpoint = intf.getEndpoint(0);
UsbDeviceConnection connection = mUsbManager.openDevice(device); 
connection.claimInterface(intf, forceClaim);
connection.bulkTransfer(endpoint, bytes, bytes.length, TIMEOUT); //do in another thread
</code></pre>

<p>获取usb设备端点</p>

<pre><code>  UsbEndpoint ep = intf.getEndpoint(i);
  ep.getType() == UsbConstants.USB_ENDPOINT_XFER_INT;//中断
  ep.getDirection()==UsbConstants.USB_DIR_OUT;//相对主机来说
</code></pre>

<h4>使用UsbRequest</h4>

<p>发送</p>

<pre><code>ByteBuffer mOutData = ByteBuffer.allocate(len);
UsbRequest mUsbRequest = new UsbRequest();
mUsbRequest.initialize(connection, mEndpointOut);
mUsbRequest.queue(mOutData, len);
if (connection.requestWait()==mUsbRequest)
    //成功
</code></pre>

<p>接收，不知道为什么在4.2上mInData要ByteBuffer.allocate(len*2)</p>

<pre><code>//ByteBuffer mInData = ByteBuffer.allocate(len);//4.0
ByteBuffer mInData = ByteBuffer.allocate(len*2);
UsbRequest mUsbRequest = new UsbRequest();
mUsbRequest.initialize(connection, mEndpointIn);
mUsbRequest.queue(mInData, len);
if (connection.requestWait()==mUsbRequest)
    byte[] data = mInData.array();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试文章]]></title>
    <link href="http://zhangshy.github.io/blog/2014/06/28/ce-shi-wen-zhang/"/>
    <updated>2014-06-28T15:57:06+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/06/28/ce-shi-wen-zhang</id>
    <content type="html"><![CDATA[<p><img src="http://hd42.xiaonei.com/photos/hd42/20080422/19/21/large_3444b150.jpg" alt="myself" /></p>

<h2>archlinux安装</h2>

<h3>pacman</h3>

<pre><code>pacman -Sy abc                    和源同步后安装名为abc的包
pacman -S abc                     从本地数据库中得到abc的信息，下载安装abc包
pacman -Sf abc                    强制安装包abc
pacman -Ss abc                   搜索有关abc信息的包
pacman -Si abc                    从数据库中搜索包abc的信息
pacman -Syu                        同步源，并更新系统
pacman -Sy                          仅同步源
pacman -R abc                     删除abc包
pacman -Rc abc                   删除abc包和依赖abc的包
pacman -Rsn abc                 移除包所有不需要的依赖包并删除其配置文件
pacman -Sc                          清理/var/cache/pacman/pkg目录下的旧包
pacman -Scc                        清除所有下载的包和数据库
pacman -Sd abc                   忽略依赖性问题，安装包abc
pacman -Su --ignore foo       升级时不升级包foo
pacman -Sg abc                   查询abc这个包组包含的软件包
pacman -Q                           列出系统中所有的包
pacman -Q package             在本地包数据库搜索(查询)指定软件包
pacman -Qi package            在本地包数据库搜索(查询)指定软件包并列出相关信息
pacman -Q | wc -l                  统计当前系统中的包数量
pacman -Qdt                         找出孤立包
pacman -Rs $(pacman -Qtdq) 删除孤立软件包（递归的,小心用)
pacman -U   abc.pkg.tar.gz      安装下载的abs包，或新编译的本地abc包
pacman-optimize &amp;&amp; sync        提高数据库访问速度
</code></pre>

<h3>输入法fcitx</h3>

<pre><code>  按照例子安装fcitx后，还要安装pacman -S fcitx-googlepinyin。  
  配置输入法，在Input Method -&gt; 去掉Only Show Currentt Language勾 -&gt; 搜索Chinese 选择
</code></pre>

<h3>声音</h3>

<pre><code># pacman -S alsa-utils
# alsamixer
注意要[M] 取消静音
</code></pre>

<h3>pyuv的deb安装</h3>

<p>archlinux安装deb文件，将deb文件解压后复制</p>

<pre><code>//先解压
ar vx pyuv_0.5-1_x86_64.deb
tar -xzvf data.tar.gz 
//复制
cp usr/bin/pyuv /usr/bin/
</code></pre>

<p>运行pyuv出错，pyuv: error while loading shared libraries: libwx_gtk2u_richtext-2.8.so.0: cannot open shared object file: No such file or directory    <br/>
安装依赖库：pacman -S wxgtk2.8</p>

<h3>安装adb</h3>

<p>64为系统安装32位程序需要安装库，对/etc/pacman.conf做如下修改</p>

<pre><code>-#[multilib]
-#Include = /etc/pacman.d/mirrorlist
+[multilib]
+Include = /etc/pacman.d/mirrorlist
</code></pre>

<p>运行pacman -Sy同步包数据库，安装pacman -S lib32-glibc和pacman -S lib32-libstdc++5; pacman -S lib32-ncurses ：lib32-ncurses也安装了，不知是否必须。</p>

<h3>串口工具</h3>

<p>安装minicom: pacman -S minicom<br/>
打开usb转串口：minicom -D /dev/ttyUSB0<br/>
设置界面：ctrl+a 后点击o，打开设置界面; ctrl+a后点击l设置保存文件;
ctrl+a后z帮助界面</p>

<h3>github博客octopress</h3>

<p><a href="http://www.ectogo.com/blog/2014/03/25/settingupoctopressblogongithub/">在Github上搭建Octopress博客</a></p>

<h4>新电脑 老博客</h4>

<pre><code>git clone git@github.com:username/username.github.io.git
cd username.github.io
git checkout source
mkdir _deploy
cd _deploy
git init
git remote add origin git@github.com:username/username.github.io.git
git pull origin master
cd ..
</code></pre>

<p>下次切换电脑的时候只需要更新一下</p>

<pre><code>#先更新source
git pull origin source
#更新master
cd _deploy
git pull origin master
cd ..
</code></pre>
]]></content>
  </entry>
  
</feed>
