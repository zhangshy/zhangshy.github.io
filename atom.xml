<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[张帅依的博客]]></title>
  <link href="http://zhangshy.github.io/atom.xml" rel="self"/>
  <link href="http://zhangshy.github.io/"/>
  <updated>2014-09-22T05:13:56+08:00</updated>
  <id>http://zhangshy.github.io/</id>
  <author>
    <name><![CDATA[张帅依]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx 学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/09/19/nginx-xue-xi/"/>
    <updated>2014-09-19T01:20:38+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/09/19/nginx-xue-xi</id>
    <content type="html"><![CDATA[<h4>配置</h4>

<p>配置文件：/etc/nginx/nginx.conf，将</p>

<pre><code>location /images/ {
        root   /data;
}
</code></pre>

<p>加入/etc/nginx/nginx.conf</p>

<h4>启动</h4>

<p>sudo systemctl start nginx</p>

<h4>测试</h4>

<p>将cap_jar.jpg复制到/data/images/目录下，运行wget <a href="http://localhost/images/cap_jar.jpg%E5%8F%AF%E5%B0%86%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E4%B8%8B%E6%9D%A5">http://localhost/images/cap_jar.jpg%E5%8F%AF%E5%B0%86%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E4%B8%8B%E6%9D%A5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ndk相关]]></title>
    <link href="http://zhangshy.github.io/blog/2014/09/12/ndkxiang-guan/"/>
    <updated>2014-09-12T23:52:50+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/09/12/ndkxiang-guan</id>
    <content type="html"><![CDATA[<h3>头文件</h3>

<p>在android-ndk-r9c/platforms/android-14/arch-arm/usr/include/下可以查看ndk相关的头文件，比如android/log.h</p>

<h3>编译工具</h3>

<p>编译工具在android-ndk-r9c/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86/bin/下。</p>

<h3>调试命令addr2line</h3>

<p>addr2line 0x08048258 -e test -f</p>

<h2>gdbserver</h2>

<p>在android端运行gdbserver :1234 &ndash;attach 96   #:1234是端口号，96 是进程ID  <br/>
在pc端运行adb forward tcp:1234 tcp:1234  #端口映射，将pc机的1235端口映射到手机的1234端口      <br/>
运行arm-linux-androideabi-gdb</p>

<pre><code>(gdb) target remote:1234
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Ctypes使用c库]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/14/python-ctypesshi-yong-cku/"/>
    <updated>2014-08-14T01:15:28+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/14/python-ctypesshi-yong-cku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/zhangshy/myTest/blob/master/python/cvsave2Png.py">我的例子</a></p>

<h3>调用c++</h3>

<p>c++编写的so库要加上extern &ldquo;C&#8221;，要不然找不到函数</p>

<h3>传递字符串</h3>

<p>使用c_char_p(b&#8221;xxxx&#8221;)传递字符串，如果直接用xxx的话，c层只能得到一个字符。</p>

<pre><code>from ctypes import *
rpng = cdll.LoadLibrary("/home/zsy/lqbz/java/librpng.so")
rpng.savejar2png(c_char_p(b"testEn.jar"), c_char_p(b"test.png"), c_char_p(b"cvout.png"))
</code></pre>

<h3>python调用shell</h3>

<p><a href="https://github.com/zhangshy/myTest/blob/master/python/pushShell.py">我的例子</a>    <br/>
    os.system(&ldquo;adb push libjni.so /system/lib&rdquo;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加密模式和填充方式]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/09/jia-mi-mo-shi-he-tian-chong-fang-shi/"/>
    <updated>2014-08-09T22:30:00+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/09/jia-mi-mo-shi-he-tian-chong-fang-shi</id>
    <content type="html"><![CDATA[<h3>模式介绍</h3>

<ol>
<li>电码本模式(Electronic Codebook Book(ECB))  <br/>
这种模式是将整个明文分成若干段相同的小段，然后对每一小段进行加密。</li>
<li>密码分组链接模式(Cipher Block Chaining (CBC))  <br/>
这种模式是先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。

<h3>填充方式</h3>

<p><a href="http://blog.chinaunix.net/uid-196845-id-2788287.html">JCE中支持AES，支持的模式和填充方式</a>    <br/>
JCE中AES支持五中模式：CBC，CFB，ECB，OFB，PCBC；支持三种填充：NoPadding，PKCS5Padding，ISO10126Padding。不支持SSL3Padding。不支持“NONE”模式。</p></li>
</ol>


<p>其中AES/ECB/NoPadding和我现在使用的AESUtil得出的结果相同(在16的整数倍情况下)。不带模式和填充来获取AES算法的时候，其默认使用ECB/PKCS5Padding。</p>

<pre><code>算法/模式/填充                   16字节加密后数据长度         不满16字节加密后长度
AES/CBC/NoPadding              16                         不支持
AES/CBC/PKCS5Padding           32                         16
AES/CBC/ISO10126Padding        32                         16
AES/CFB/NoPadding              16                         原始数据长度
AES/CFB/PKCS5Padding           32                         16
AES/CFB/ISO10126Padding        32                         16
AES/ECB/NoPadding              16                         不支持
AES/ECB/PKCS5Padding           32                         16
AES/ECB/ISO10126Padding        32                         16
AES/OFB/NoPadding              16                         原始数据长度
AES/OFB/PKCS5Padding           32                         16
AES/OFB/ISO10126Padding        32                         16
AES/PCBC/NoPadding             16                         不支持
AES/PCBC/PKCS5Padding          32                         16
AES/PCBC/ISO10126Padding       32                         16
</code></pre>

<p>可以看到，在原始数据长度为16的整数倍时，假如原始数据长度等于16n，则使用NoPadding时加密后数据长度等于16n，其它情况下加密数据长度等于16(n+1)。在不足16的整数倍的情况下，假如原始数据长度等于16n+m[其中m小于16]，除了NoPadding填充之外的任何方式，加密数据长度都等于16(n+1)；NoPadding填充情况下，CBC、ECB和PCBC三种模式是不支持的，CFB、OFB两种模式下则加密数据长度等于原始数据长度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DexClassLoader动态加载]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/08/dexclassloaderdong-tai-jia-zai/"/>
    <updated>2014-08-08T19:40:07+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/08/dexclassloaderdong-tai-jia-zai</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/over140/archive/2011/11/23/2259367.html">Android动态加载jar/dex</a>      <br/>
<a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823">Android中的动态加载机制</a>   <br/>
<a href="https://github.com/zhangshy/myTest/tree/master/DexClassLoaderTest">示例代码</a></p>

<h2>1. 准备dex文件</h2>

<h3>1.1 编写</h3>

<p>接口：</p>

<pre><code>package com.dex.test;

public interface IDextest {
    public String getDexString();
}
</code></pre>

<p>实现：</p>

<pre><code>package com.dex.test;

public class Dextest implements IDextest{
    @Override
    public String getDexString() {
        return "here dex test!!";
    }
}
</code></pre>

<h3>1.2 导出jar包</h3>

<p><img src="http://zhangshy.github.io/images/cap_jar.jpg" alt="导出jar包" />     <br/>
导出时不用选择接口文件。</p>

<h3>1.3 使用dx转换</h3>

<p>dx在sdk/build-tools/android-4.4.2/下，执行/opt/android/sdk/build-tools/android-4.4.2/dx &ndash;dex &ndash;output=test.jar dextest.jar</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Binder编写]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/06/android-binderbian-xie/"/>
    <updated>2014-08-06T19:35:45+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/06/android-binderbian-xie</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html">Android深入浅出之Binder机制</a>  <br/>
<a href="https://github.com/zhangshy/myTest/tree/master/binder">我的例子</a></p>

<pre><code>使用NDK编译多模块时编译顺序和要生成的文件的首字母有关？
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux多线程编程]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/06/linuxduo-xian-cheng-bian-cheng/"/>
    <updated>2014-08-06T01:28:29+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/06/linuxduo-xian-cheng-bian-cheng</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/BiffoLee/archive/2011/11/18/2254540.html">linux多线程编程</a></p>

<h3>pthread_create</h3>

<pre><code>void *test_thread(void *arg) {
    int *num = (int *)arg;  //可以得到参数
}

pthread_t thread_id;
int testNum=1;
pthread_create(&amp;thread_id, NULL, test_thread, (void *)&amp;testNum);
</code></pre>

<h3>pthread_detach与pthread_join</h3>

<p>调用pthread_join(pthread_id)后，如果该线程没有运行结束，调用者会被阻塞;这时可以在子线程中加入代码    <br/>
pthread_detach(pthread_self())    <br/>
或者父线程调用    <br/>
pthread_detach(thread_id)（非阻塞，可立即返回）   <br/>
这将该子线程的状态设置为detached,则该线程运行结束后会自动释放所有资源</p>

<h3>pthread_cond_wait</h3>

<p><a href="http://baike.baidu.com/view/5725833.htm?fr=aladdin">pthread_cond_wait</a>   <br/>
条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个线程等待&#8221;条件变量的条件成立&#8221;而挂起；另一个线程使&#8221;条件成立&#8221;（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。</p>

<pre><code>pthread_mutex_t mutex;
pthread_cond_t cond;
pthread_mutex_init(&amp;mutex, NULL);
pthread_cond_init(&amp;cond, NULL);

//等待
pthread_mutex_lock(&amp;mutex);
pthread_cond_wait(&amp;cond, &amp;mutex);
pthread_mutex_unlock(&amp;mutex)
//激活
pthread_mutex_lock(&amp;mutex);
pthread_cond_signal(&amp;cond);
pthread_mutex_unlock(&amp;mutex);
//注销
pthread_mutex_destroy(&amp;mutex);
pthread_cond_destroy(&amp;cond);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[环形buffer]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/05/huan-xing-buffer/"/>
    <updated>2014-08-05T00:00:14+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/05/huan-xing-buffer</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/zhangshy/myTest/blob/master/ringBuffer/ringBuffer.c">示例代码</a></p>

<h3>定义</h3>

<pre><code>#define BUFFER_SIZE 0xF 
typedef struct {
    uint32_t wptr;   ///&lt; buffer存储位置，索引范围：[0:2*BUFFER_SIZE+1]
    uint32_t rptr;   ///&lt; buffer读取位置，索引范围：[0:2*BUFFER_SIZE+1]
    uint8_t buffer[BUFFER_SIZE+1];  ///&lt; buffer大小为BUFFER_SIZE+1
}ring_buffer_t; 
</code></pre>

<h3>使用</h3>

<p>若BUFFER_SIZE=3，wptr和rptr的索引为[0:7]  <br/>
1. wptr=rptr时buffer为空      <br/>
2. wptr和rptr之间的差值为BUFFER_SIZE+1即4时buffer为满     <br/>
3. wptr和rptr的范围通过pbuf->wptr &amp;= (BUFFER_SIZE&lt;&lt;1)|0x1 确定，BUFFER_SIZE的取值应该是N个2进制1？？</p>

<pre><code>__inline uint32_t ring_buffer_is_empty(ring_buffer_t *pbuf) {
    return (pbuf-&gt;wptr==pbuf-&gt;rptr);
}

__inline uint32_t ring_buffer_is_full(ring_buffer_t *pbuf) {
    return ((pbuf-&gt;wptr^pbuf-&gt;rptr)==(BUFFER_SIZE+1));
}

__inline void ring_buffer_flush(ring_buffer_t *pbuf) {
    pbuf-&gt;wptr = pbuf-&gt;rptr = 0;
}

void fill_ring_buffer(ring_buffer_t *pbuf, uint8_t data) {
    pbuf-&gt;buffer[pbuf-&gt;wptr&amp;BUFFER_SIZE] = data;
    pbuf-&gt;wptr++;
    pbuf-&gt;wptr &amp;= (BUFFER_SIZE&lt;&lt;1)|0x1;
}

uint8_t dump_ring_buffer(ring_buffer_t *pbuf) {
    uint8_t data;
    data = pbuf-&gt;buffer[pbuf-&gt;rptr&amp;BUFFER_SIZE];
    pbuf-&gt;rptr++;
    pbuf-&gt;rptr &amp;= (BUFFER_SIZE&lt;&lt;1)|0x1;

    return data;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objdump学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/29/objdumpxue-xi/"/>
    <updated>2014-07-29T17:36:08+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/29/objdumpxue-xi</id>
    <content type="html"><![CDATA[<h2>1. 简单程序hello world</h2>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char** argv) {
    printf("hello world!!\n");
    int a = 0x123;
    int b = 0x234;
    int c = a + b;
    printf("c is: 0x%x\n", c);
    return 0;
}
</code></pre>

<p>编译gcc hello.c -o hello</p>

<h3>1.1 gcc -S</h3>

<p>gcc hello.c -S -o hello.s     <br/>
查看hello.s内容cat hello.s</p>

<pre><code>    .file   "hello.c"
    .section        .rodata
.LC0:
    .string "hello world!!"
.LC1:
    .string "c is: 0x%x\n"
    .text
.globl main
    .type   main, @function
main:
.LFB0:
    .cfi_startproc
    pushq   %rbp
    .cfi_def_cfa_offset 16
    movq    %rsp, %rbp
    .cfi_offset 6, -16
    .cfi_def_cfa_register 6
    subq    $32, %rsp
    movl    %edi, -20(%rbp)
    movq    %rsi, -32(%rbp)
    movl    $.LC0, %edi
    call    puts
    movl    $291, -4(%rbp)
    movl    $564, -8(%rbp)
    movl    -8(%rbp), %eax
    movl    -4(%rbp), %edx
    leal    (%rdx,%rax), %eax
    movl    %eax, -12(%rbp)
    movl    $.LC1, %eax
    movl    -12(%rbp), %edx
    movl    %edx, %esi
    movq    %rax, %rdi
    movl    $0, %eax
    call    printf
    movl    $0, %eax
    leave
    ret
    .cfi_endproc
.LFE0:
    .size   main, .-main
    .ident  "GCC: (Ubuntu/Linaro 4.4.7-1ubuntu2) 4.4.7"
    .section        .note.GNU-stack,"",@progbits
</code></pre>

<h3>1.2 objdump指令</h3>

<h4>1.2.1 objdump -s hello</h4>

<p>显示所有section内容</p>

<pre><code>objdump -s -j .rodata hello

hello:     file format elf64-x86-64

Contents of section .rodata:
400688 01000200 68656c6c 6f20776f 726c6421  ....hello world!
400698 21006320 69733a20 30782578 0a00      !.c is: 0x%x..  
只显示.rodata部分
</code></pre>

<h4>1.2.2 objdump -S hello</h4>

<pre><code>objdump -S -j .rodata hello
hello:     file format elf64-x86-64

Disassembly of section .rodata:

0000000000400688 &lt;_IO_stdin_used&gt;:
400688:       01 00 02 00 68 65 6c 6c 6f 20 77 6f 72 6c 64 21     ....hello world!
400698:       21 00 63 20 69 73 3a 20 30 78 25 78 0a 00           !.c is: 0x%x..
</code></pre>

<h2>各段含义</h2>

<p><a href="http://blog.sina.com.cn/s/blog_8053938901014gih.html">汇编中bss,data,text,rodata,heap,stack,意义</a>    <br/>
bss段：</p>

<pre><code>BSS段（bsssegment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS是英文BlockStarted by Symbol的简称。BSS段属于静态内存分配。
</code></pre>

<p>data段：</p>

<pre><code>数据段（datasegment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。       
</code></pre>

<p>text段：</p>

<pre><code>代码段（codesegment/textsegment）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读,某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等
</code></pre>

<p>rodata段：</p>

<pre><code>存放C中的字符串和#define定义的常量
</code></pre>

<h2>ARM汇编</h2>

<h3>参数传递</h3>

<pre><code>当少于四个时，按从左到右的顺序依次放在r0,r1,r2,r3中;
当多于四个时，前四个放在r0,r1,r2,r3中，剩余的放在堆栈中，
最后一个参数先入栈，第五个参数最后入栈，即从右到左入栈
</code></pre>

<h3>返回值</h3>

<pre><code>结果为32位时,通过R0返回
结果为64位时，r0放低32位，r1放高32位        
</code></pre>

<p><a href="http://yulin724.wikidot.com/rwpaper:arm-assembly-instructions#toc12">ARM汇编指令集</a></p>

<h4>BL</h4>

<p>BL是arm汇编中用来调用子程序的指令，它把BL后面一条指令的地址放到R14寄存器里，R15寄存器(PC当前指针地址)就设置成要跳往的地址。这样在这个子程序返回时，再mov PC, R14就可以返回到BL后面的地址了</p>

<h4>BEQ</h4>

<p>BEQ指定是跳转指令，但是跳转要满足一定的条件，例：CMP    R1，#0    BEQ  Label    即当R1和0相等的时候程序跳到标号Label处执行。(BEQ执行后不调回去？？)</p>

<h4>LDR/STR</h4>

<p>ARM是RISC结构，数据从内存到CPU之间的移动只能通过L/S指令来完成，也就是ldr/str指令。比如想把数据从内存中某处读取到寄存器中，只能使用ldr，比如：</p>

<pre><code>ldr r0, 0x12345678
</code></pre>

<p>就是把0x12345678这个地址中的值存放到r0中。而mov不能干这个活，mov只能在寄存器之间移动数据，或者把立即数移动到寄存器中，这个和x86这种CISC架构的芯片区别最大的地方。</p>

<h4>LDR伪指令</h4>

<p>ldr r0, =0x12345678       <br/>
把0x12345678这个地址写到r0中</p>

<h4>LDMIA</h4>

<p>LDMIA R0! ,{R1,R2}  是指将R0指向的单元中的数据读出到R1，R2中      <br/>
R1←[R0] R2←[R0＋4]</p>

<h4>BIC</h4>

<p>位清除    <br/>
    BIC     R0, R0, #0xF0000000     将R0高4位清零
    BIC     R1, R1, #0x0F           将R1低4位清0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络抓包wireshark]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/28/wang-luo-zhua-bao-wireshark/"/>
    <updated>2014-07-28T18:33:35+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/28/wang-luo-zhua-bao-wireshark</id>
    <content type="html"><![CDATA[<h2>抓取youku</h2>

<p>先使用wireshark抓取了一次youku申请播放的过程</p>

<h4>过滤字符串</h4>

<p>在Filter里输入：http contains &ldquo;getPlayList&rdquo;</p>

<h4>过滤ip</h4>

<p>ip.src==101.227.10.18 or ip.dst==101.227.10.18</p>

<h4>复制数据包内容</h4>

<p>选择数据包，右键&ndash;copy</p>

<h4>youku实际地址</h4>

<p>http contains &ldquo;getFlvPath&rdquo;    <br/>
<img src="http://zhangshy.github.io/images/cap_youku1.jpg" alt="结果" />
在vlc中打开路径可以播放：</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python网络编程]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/26/pythonwang-luo-bian-cheng/"/>
    <updated>2014-07-26T01:03:38+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/26/pythonwang-luo-bian-cheng</id>
    <content type="html"><![CDATA[<h3>获取url数据</h3>

<pre><code>url = "http://www.youku.com/"
req = urllib.request.Request(url)
req.add_header('User-agent', 'Mozilla/5.0')
r = urllib.request.urlopen(req)
print(r.read().decode("UTF-8"))
</code></pre>

<h3>保存图片</h3>

<pre><code>urllib.request.urlretrieve(url, fileName);  #将url内容存入文件
</code></pre>

<h3>分析html</h3>

<p>使用html.parser.HTMLParser分析html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/25/pythonxue-xi/"/>
    <updated>2014-07-25T00:15:52+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/25/pythonxue-xi</id>
    <content type="html"><![CDATA[<h3>print</h3>

<p>格式化输出，可以结合format格式化输出，end=&ldquo; &rdquo; 参数可以改变单次print的结束</p>

<pre><code>a=10
b=12
print("0x{0:02x}+0x{1:x}={2}".format(a, b, a+b))
print("0x%02x+0x%x=%d" % (a, b, a+b))
输出相同：0x0a+0xc=22
</code></pre>

<p>%% 百分号标记     <br/>
%c 字符及其ASCII码    <br/>
%s 字符串     <br/>
%d 有符号整数(十进制)     <br/>
%u 无符号整数(十进制)     <br/>
%o 无符号整数(八进制)     <br/>
%x 无符号整数(十六进制)   <br/>
%X 无符号整数(十六进制大写字符)   <br/>
%e 浮点数字(科学计数法)   <br/>
%E 浮点数字(科学计数法，用E代替e)     <br/>
%f 浮点数字(用小数点符号)     <br/>
%g 浮点数字(根据值的大小采用%e或%f)   <br/>
%G 浮点数字(类似于%g)     <br/>
%p 指针(用十六进制打印值的内存地址)   <br/>
%n 存储输出字符的数量放进参数列表的下一个变量中</p>

<h3>字典</h3>

<pre><code>headers = {'User-agent':'Mozilla/5.0',
       'cache-control':'no-cache',
       'accept':'*/*'}
for k, v in headers.items():
    print(k, v)
</code></pre>

<p>输出</p>

<pre><code>User-agent Mozilla/5.0
cache-control no-cache
accept */*
</code></pre>

<h3>chr hex ord</h3>

<p>ord返回字符的ASCII  print(ord(&lsquo;a&rsquo;)) 输出97    <br/>
chr返回字符 print(chr(97))  输出a     <br/>
hex返回16进制   print(hex(97))  输出0x61</p>

<pre><code>f=open('xxx.ts', 'r', encoding="ISO-8859-1")
context = f.read()
buf = [ord(i) for i in context]
</code></pre>

<h3>字符串操作</h3>

<h4>查找</h4>

<p>find和index，使用index未找到字符串会抛出异常，find不抛异常只是返回-1。</p>

<pre><code>index1 = str.find("xx")
index2 = str.find("xxx", index1)#从第index1位置开始查找
</code></pre>

<h4>复制</h4>

<p>str2 = str[index1: index2]</p>

<h3>时间</h3>

<p>获取当前时间localtime，格式化时间strftime</p>

<pre><code>import time
print(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
输出2014-07-24 19:13:43
</code></pre>

<h3>文件操作</h3>

<p>os.access可以判断文件是否存在，os.mkdir创建文件夹</p>

<pre><code>if not os.access(filePath, os.R_OK):
    print("目录不存在")
    os.mkdir(filePath, mode=0o777)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ts流]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/22/tsliu/"/>
    <updated>2014-07-22T17:08:51+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/22/tsliu</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/liuhongxiangm/article/details/8981032">TS详解</a></p>

<h3>整体描述</h3>

<p>ts整包长度为<font color="red">188</font>,前4字节为包头。</p>

<table class="table table-bordered table-striped table-condensed">
<thead>
 <tr>
    <th>同步字节</th>
    <th>传输错误指示</th>
    <th>开始指示</th>
    <th>传输优先级</th>
    <th>PID</th>
    <th>加扰控制</th>
    <th>适配域控制</th>
    <th>连续性计数器</th>
 </tr>
 </thead>
 <tbody>
 <tr>
    <td>8</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>13</td>
    <td>2</td>
    <td>2</td>
    <td>4</td>
 </tr>
 </tbody>
</table>


<p>sync_byte （同步字节）：固定为0100 0111(0x47)；该字节由解码器识别，使包头和有效负载可相互分离,MPEG-2解码器接收到MPEG-2 TS流时，首先检测包结构，在TS流中查找同步字节：</p>

<pre><code>总是OX47，总位于TS包开始位置，固定间隔为188字节。同时满足这两个条件，可以确定同步。
如果出现一个字节为47hex(OX47)，解码器将检测这个字节前后n倍188字节的位置是否也是同步字节。
如果是，则当前字节为同步字节；
否则，当前字节只是码流中偶尔出现的47hex，不是同步字节
</code></pre>

<p>Table ID长度为8bit</p>

<pre><code>47  48  04  17  00  80  70 ...
同步字节：0x47
PID：0x804
Table ID：0x80
</code></pre>

<h3>各表</h3>

<pre><code>PAT表PID：0,Table ID：0,包含PMT信息
CAT表PID：1,Table ID：1,包含CA的EMM信息
PMT表PID从PAT中获取，Table ID：2,包含音视频和CA的ECM信息
NIT表PID：0x10,Table ID：0x40、0x41，描述了各个频点、符号率和调制方式。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git使用]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/21/gitshi-yong/"/>
    <updated>2014-07-21T19:48:05+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/21/gitshi-yong</id>
    <content type="html"><![CDATA[<h3>在git status时显示与origin/master的比较</h3>

<p>在git status时显示Your branch is ahead of &lsquo;origin/master&rsquo; by 1 commit</p>

<pre><code>git branch --set-upstream master  origin/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/21/cyu-yan-xue-xi/"/>
    <updated>2014-07-21T18:30:30+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/21/cyu-yan-xue-xi</id>
    <content type="html"><![CDATA[<h3>VA_ARGS</h3>

<p>可变参数宏，如果可变参数被忽略或为空, ‘##’操作将使预处理器(preprocessor)去除掉它 前面的那个逗号</p>

<pre><code>#define dePrintf(X,...) printf("[%s %s: %d]" X, __FILE__, __func__, __LINE__, ##__VA_ARGS__)
</code></pre>

<h3>cpp引用c函数库</h3>

<pre><code>#ifdef __cplusplus
extern "C"{
#endif
/* c++引用C，将#include "x264.h"放到extern "C" 中 */
#include "x264.h"
#ifdef __cplusplus
}
#endif
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Jni编写]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/14/android-jnibian-xie/"/>
    <updated>2014-07-14T19:26:26+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/14/android-jnibian-xie</id>
    <content type="html"><![CDATA[<h3>java文件编写</h3>

<pre><code>package com.example.jni

public class Testjni {
    public native int jniRead(byte[] data, int len);
    public native int jniWrite(byte[] data, int len);
    static {
        System.loadLibrary("myJni");
    }
}
</code></pre>

<h3>jni文件编写</h3>

<p>jni文件的函数名要和java中的方法名对应起来，在jni中申请的空间要注意释放。</p>

<pre><code>#include &lt;jni.h&gt;
#include &lt;android/log.h&gt;

#define LOG_TAG "myJni.c"
#define LOGI(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA__ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA__ARGS__)

jint Java_com_example_jni_jniRead(JNIEnv *env, jobject thiz,
    jbyteArray receiveBuf, jint slen) {
    uint8_t p_recv_buf[256] = {0};
    int len = slen;
    len = read(fd, p_recv_buf, slen);
    LOGI("rea len:%d\n", len);
    (*env)-&gt;setByteArrayRegion(env, receiveBuf, 0, len,
        (const jbyte*)p_recv_buf);
    return len;
}

jint Java_com_example_jni_jniWrite(JNIEnv *env, jobject thiz,
    jbyteArray sendBuf, jint len) {
    //申请空间
    jbyte *sendelems = (*env)-&gt;GetByteArrayElements(env, sendBuf, NULL);
    ...//处理函数
    //释放
    (*env)-&gt;ReleaseByteArrayElements(env, sendBuf, sendelems, 0);
    return 0;
}
</code></pre>

<h3>Android.mk</h3>

<pre><code>LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_MODULE_TAGS := optional
LOCAL_SRC_FILES:= \
    myJni.c
LOCAL_LDLIBS := -llog

LOCAL_SHARED_LIBRARIES += libam_adp liblog libcutils
LOCAL_C_INCLUDES += ../inc
#编译生成libmyJni.so
LOCAL_MODULE := libmyJni
#编译动态库
include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>执行mm编译。（菜鸟级别解释：:=是赋值的意思，+=是追加的意思，$是引用某变量的值）补充说明：BUILD_EXECUTABLE表示以一个可执行程序的方式进行编译，include $(BUILD_PACKAGE)则是编译出一个apk，include $(BUILD_STATIC_JAVA_LIBRARY)则是编译出jar包。</p>

<h4>LOCAL_MODULE_TAGS说明</h4>

<p>LOCAL_MODULE_TAGS ：=user eng tests optional  <br/>
user: 指该模块只在user版本下才编译    <br/>
eng: 指该模块只在eng版本下才编译      <br/>
tests: 指该模块只在tests版本下才编译      <br/>
optional:指该模块在所有版本下都编译   <br/>
我一般都使用optional</p>

<h2>我的例子</h2>

<h3>javah生成h文件</h3>

<p>在src目录下执行javah -jni com.example.jni.Getso后生成com_example_jni_Getso.h</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux驱动]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/10/linuxqu-dong/"/>
    <updated>2014-07-10T00:08:06+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/10/linuxqu-dong</id>
    <content type="html"><![CDATA[<h3>交叉编译</h3>

<p>编译ko文件</p>

<pre><code>Makefile:
PWD=$(shell pwd)
KDIR=/xx/xx/linux-3.4

obj-m+=scr.o
scr-objs := file1.o file2.o test-scr.o

build:
    $(MAKE) -C $(KDIR) M=$(PWD)

clean:
    @rm -rf *.o *.ko *.cmd *.mod.c *.order *.symvers *.tmp_versions *~
</code></pre>

<p>执行编译：</p>

<pre><code>make ARCH=arm CROSS_COMPILE=/xx/xx/arm-linux-gnueabi-
</code></pre>

<h3>创建设备</h3>

<p>class_create和device_create函数，在/dev下创建设备节点</p>

<pre><code>int my_device_major = register_chrdev(0, "myDevice", &amp;my_device_fops);
struct class* my_device_class = class_create(THIS_MODULE, "myDevice");
//在/sys/class下创建了myDevice目录
if (IS_ERR(my_device_class))
    return -1;
device_create(my_device_class, NULL, MKDEV(my_device_major, 0), NULL, "myDevice");
//在/dev下创建myDevice设备
</code></pre>

<h3>自旋锁spinlock_t</h3>

<p>spin_lock_irqsave会关闭中断</p>

<pre><code>spinlock_t rx_slock;
spin_lock_init(&amp;rx_slock);  //初始化
/* 使用 */
unsigned long flags;
spin_lock_irqsave(&amp;rx_slock, flags);
...
//处理
...
spin_unlock_irqrestpre(&amp;rx_slock, flags);
</code></pre>

<h3>poll</h3>

<h4>驱动poll_wait</h4>

<pre><code>wait_queue_head_t rd_wq;
init_waitqueue_head(&amp;rd_wq);

unsigned int test_poll(struct file *filp, struct poll_table_struct *wait){
    unsigned int ret = 0;
    poll_wait(filp, &amp;rd_wq, wait);
    ...//处理
    if (hasData) ret |= POLLIN|POLLRDNORM;
    return ret;
}

当收到数后：wake_up_interruptible(&amp;rd_wq);
</code></pre>

<h4>应用poll</h4>

<pre><code>int fd = open("/dev/xxx", O_RDWR);
uint32_t timeout = xxxxx;
struct pollfd pfd;
pfd.fd = fd;
pfd.events = POLLIN;
ret = poll(&amp;pfd, 1, timeout);
if (ret!=1)
    return -1;
ret = read(fd, (void*)data, *size);
</code></pre>

<h3>workqueue工作队列在中断中使用</h3>

<p>使用：在有大量的中断处理中，需要紧急处理的中断直接在中断处理函数中进行，可以延迟处理的中断放到了workqueue中做，（不知这样对不对，我看网上还有一种tasklet）。workqueue的使用：</p>

<pre><code>struct work_struct device_work;
struct workqueue_struct *device_wq;

void device_work_func(struct work_struct *work) {
    ...//处理中断的函数
}
//中断回调函数
irqreturn_t device_irq_service(int irqno, void *dev_id) {
    unsigned int temp;
    unsinged long flags;
    //加锁
    spin_lock_irqsave(&amp;rx_slock, flags);
    temp = my_get_device_interrupt_status();//一般都可以从寄存器中读到中断状态
    if (temp&amp;MY_DEVICE_IMMEDIATE) { //需要立即处理的紧急中断
        ...//中断处理
    } else {
        queue_work(device_wq, &amp;device_work);
    }
    spin_unlock_irqrestpre(&amp;rx_slock, flags);
}

//初始化
device_wq = create_singlethread_workqueue("device_wq");//只创建一个内核线程
INIT_WORK(&amp;device_work, device_work_func);
request_irq(my_irq_no, device_irq_service, 0, "my_device", NULL);//注册中断服务
</code></pre>

<p>补充：
1. 中断处理中尽量不要加打印;
2. 在硬中断处理函数device_irq_service中不能使用mutex_lock，如果必须加锁可使用自旋锁spinlock_t; 在软中断
函数device_work_func中可以加mutex_lock</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[智能卡]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/04/zhi-neng-qia/"/>
    <updated>2014-07-04T18:43:41+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/04/zhi-neng-qia</id>
    <content type="html"><![CDATA[<h3>智能卡ATR</h3>

<p>一般来说只要VCC上电CLK有时钟（电压要对应，data保持上拉），这时只用给RST持续一段时间的低电平，智能卡就会主动回复ATR。智能卡可以直接使用5V供电，目前还没遇到过只工作在3V的卡，一般工作电压在2.7-5.5V，但遇到过工作电压是4.75-5.25V的卡。  <br/>
ATR最长33字节，ATR的各数据位之间可能也有一段的时间间隔，这些在7816协议中都有规定。读ATR可以采用两种方式：按照协议边分析边读，这样按照协议读数结束就可以return了;也可以不管协议直接读，ATR中两个字节之间的间隔最长可以是9600etu，超时就认为ATR结束了。</p>

<h3>反向</h3>

<p>像NDS的卡数据是反向，可通过ATR第一个字节看出，一般判断0x03或0x3f为反向卡。反向指高低位倒过来，再取反(软件取反的话，可以通过查表的方式)</p>

<pre><code>0x03
0 0 0 0 0 0 1 1 先高低倒过来
1 1 0 0 0 0 0 0 再取反
0 0 1 1 1 1 1 1 0x3f
</code></pre>

<h3>数据传输</h3>

<p>一般来说传输一个字符要12个etu=1 START + 8 DATA + 1 PARITY + 2 GUARD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/03/linux-xue-xi/"/>
    <updated>2014-07-03T07:00:20+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/03/linux-xue-xi</id>
    <content type="html"><![CDATA[<h4>vim</h4>

<p>:vsplit 将窗口分成两个，ctrl+w切换<br/>
:edit 打开文件<br/>
:%!xxd -g 1 ：切换成十六进制的一个字节的模式  <br/>
u 撤销上一步的操作<br/>
ctrl+r 恢复上一步被撤销的操作 <br/>
shift+8 查找当前单词  <br/>
ggVG 全选 <br/>
q: 进入命令历史编辑   <br/>
vim xxx +N  打开文件并跳到第N行  <br/>
vim -d xx xxx 等同于 vimdiff xx xxx   <br/>
:set noro   取消只读，在git difftool时很有用  <br/>
dp将当前光标内容复制到另一窗口，do将另一窗口内容复制过来</p>

<h4>tar</h4>

<p>查看内容不解压：tar tvf xxx.tar.gz<br/>
解压：tar -xzvf xxx.tar.gz<br/>
解压到指定目录：tar -xzvf xxx.tar.gz -C /XX/XXX   <br/>
压缩：tar -czvf xxx.tar.gz xxx/   <br/>
解压：tar -xjvf xxx.tar.bz2</p>

<h4>mount</h4>

<p>mount后让普通用户有读写权限，加参数-o umask=000</p>

<pre><code>sudo mount /dev/sdb1 /mnt/ -o umask=000
</code></pre>

<p>挂载linux网络设备</p>

<pre><code>mount -t nfs -o nolock 192.168.0.188:/share /mnt
</code></pre>

<h4>pkg-config</h4>

<pre><code>查看头文件：pkg-config --cflags opencv
查找库文件：pkg-config --libs opencv
查看版本： pkg-config --modversion opencv
</code></pre>

<h4>cp</h4>

<p>连带目录一起复制： cp &ndash;parents -r xx/xx/xx/ xx/</p>

<h3>sed</h3>

<p>&lsquo;-i&#8217;使修改生效<br/>
a. 将old替换为new： sed &rsquo;s/old/new/g&rsquo; file -i<br/>
b. 删除第四行： sed &lsquo;4 d&rsquo; file<br/>
c. 在第三行后添加一行： sed &lsquo;3 a xxx&rsquo; file<br/>
d. 在第三行前添加一行： sed &lsquo;3 i xxx&rsquo; file</p>

<h3>find和grep</h3>

<p>在.c文件中查找东西：find -name &lsquo;*.c&rsquo; | xargs grep &lsquo;xxx&rsquo;</p>

<h3>gcc编译时指定小端-EL</h3>

<p>mips-linux-gnu-gcc -g -O2 -Wall -EL test.c</p>

<h3>watch</h3>

<p>检测一个命令的运行结果，默认2S间隔重复运行命令，用-n参数指定时间间隔: watch
free</p>

<h3>usermod</h3>

<p>查看用户所属的组：groups user     <br/>
添加用户到某个组：usermod -a -G groupA user</p>

<h3>&amp;&amp;和||</h3>

<p>command1 &amp;&amp; command2 当command1执行成功才执行command2     <br/>
command1 || command2 当command1执行不成功才执行command2</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/02/androidxue-xi/"/>
    <updated>2014-07-02T22:35:05+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/02/androidxue-xi</id>
    <content type="html"><![CDATA[<h2>包属性</h2>

<h3>sharedUserId</h3>

<p>使用sharedUserId属性时取值需要包含点（dot），如android:sharedUserId=&ldquo;test&#8221;安装时会提示：Failure [INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID]。使用android:sharedUserId=&#8221;zsy.test&#8221;就可以了。</p>

<h2>Handler和HandlerThread</h2>

<p>Handler会关联一个单独的线程和消息队列。Handler默认关联主线程，会在主线程执行，如果在这里面的操作会有阻塞，界面也会卡住。如果要在其他线程执行，可以使用HandlerThread</p>

<pre><code>HandlerThread mHandlerThread = new HandlerThread("test");
mHandlerThread.start();
Handler mHandler = new Handler(mHandlerThread.getLooper()) {
    public void handlerMessage(Message msg) {
        XXX
    }
};
</code></pre>

<p>当要停止mHandlerThread时可执行：</p>

<pre><code>mHandlerThread.quit();
</code></pre>

<h2>Thread和Runnable</h2>

<p><a href="http://developer.51cto.com/art/201203/321042.htm">Java中Runnable和Thread的区别</a></p>

<p>在java中可有两种方式实现多线程，一种是继承Thread类，一种是实现Runnable接口；Thread类是在java.lang包中定义的。一个类只要继承了Thread类同时覆写了本类中的run()方法就可以实现多线程操作了，但是一个类只能继承一个父类，这是此方法的局限</p>

<p>在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：1.避免点继承的局限，一个类可以继承多个接口;2.适合于资源的共享</p>

<pre><code>package org.demo.runnable;  
class MyThread implements Runnable{  
    private int ticket=10;  
    public void run(){  
        for(int i=0;i&lt;20;i++){  
            if(this.ticket&gt;0){  
                System.out.println("卖票：ticket"+this.ticket--);  
            }  
        }  
    }  
}  
package org.demo.runnable;  
public class RunnableTicket {  
    public static void main(String[] args) {  
        MyThread mt=new MyThread();  
        new Thread(mt).start();//同一个mt，但是在Thread中就不可以，如果用同一  
        new Thread(mt).start();//个实例化对象mt，就会出现异常  
        new Thread(mt).start();  
    }  
}; 
</code></pre>

<h2>Button</h2>

<p>使用Button的时候可以这么用：</p>

<pre><code>public class MainActivity extends Activity implements View.OnClickListener {
    ...
    Button btn_ok = (Button) findViewById(R.id.btn_ok);
    btn_ok.setOnClickListener(this);
}
</code></pre>

<p>实现onClick(View v)方法，而且费时的按键响应操作使用Handler做</p>

<pre><code>public void onClick(View v) {
    switch(v.getId()) {
    case R.id.btn_ok:
        Message m = new Message();
        m.what = XXXX;
        Bundle data = new Bundle();
        data.putString(XXX, XXXXX);
        m.setData(data);
        mHandler.sendMessage(m);
        break;
    }
}
</code></pre>

<p>mHandler的写法</p>

<pre><code>private Handler mHandler = new Handler() {
    public void handleMessage(Message msg) {
        switch(msg.what) {
        case XXX:
            String str = msg.getData().getString(XXX);
            break;
        }
    }
}
</code></pre>

<h2>像素</h2>

<p><a href="http://www.cnblogs.com/bjzhanghao/archive/2012/11/06/2757300.html">px、dp和sp，这些单位有什么区别？</a><br/>
px指屏幕上物理像素点，不建议使用;
   因为100px的图片在不同手机上显示的实际大小可能不同</p>

<pre><code>You would use:    
    sp for font sizes
    dip for everything else.    
    dip==dp
</code></pre>

<h2>adb及常用调试指令</h2>

<p>开启adb功能：start adbd   <br/>
查看设备：adb devices     <br/>
多于一个设备时指定设备：adb -s 192.168.11.84:5555 shell     <br/>
启动应用某界面：am start com.example.test/.MainActivity   <br/>
命令行安装应用：pm install xxx.apk    <br/>
命令行卸载应用：pm uninstall com.example.test     <br/>
启动模拟器：./emulator -avd test -memory 512 -partition-size 256  启动名称为test的模拟器，rom大小256M</p>

<h2>分析工具dumpsys</h2>

<p>dumpsys用来给出android应用程序的信息：</p>

<pre><code>dumpsys [Option]
        meminfo 内存信息
        cpuinfo cpu信息
        等很多选项
service list可以列出服务
</code></pre>

<h3>mat使用</h3>

<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-ecl-ma/index.html">安装配置</a>   <br/>
<a href="http://stackoverflow.com/questions/3999087/how-to-enable-heap-updates-on-my-android-client">How to enable Heap updates on my android client</a></p>

<h2>签名文件</h2>

<p>生成签名文件</p>

<pre><code>keytool -genkey -alias sign.keystore -keyalg RSA -validity 20000 -keystore sign.keystore
</code></pre>

<p>签名</p>

<pre><code>jarsigner -verbose -keystore sign.keystore -signedjar xxx_signed.apk xxx.apk sign.keystore
</code></pre>
]]></content>
  </entry>
  
</feed>
