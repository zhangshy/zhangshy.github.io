<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[张帅依的博客]]></title>
  <link href="http://zhangshy.github.io/atom.xml" rel="self"/>
  <link href="http://zhangshy.github.io/"/>
  <updated>2014-07-04T16:04:31+00:00</updated>
  <id>http://zhangshy.github.io/</id>
  <author>
    <name><![CDATA[张帅依]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[智能卡]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/04/zhi-neng-qia/"/>
    <updated>2014-07-04T10:43:41+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/04/zhi-neng-qia</id>
    <content type="html"><![CDATA[<h3>智能卡ATR</h3>

<p>一般来说只要VCC上电CLK有时钟（电压要对应，data保持上拉），这时只用给RST持续一段时间的低电平，智能卡就会主动回复ATR。智能卡可以直接使用5V供电，目前还没遇到过只工作在3V的卡，一般工作电压在2.7-5.5V，但遇到过工作电压是4.75-5.25V的卡。  <br/>
ATR最长33字节，ATR的各数据位之间可能也有一段的时间间隔，这些在7816协议中都有规定。读ATR可以采用两种方式：按照协议边分析边读，这样按照协议读数结束就可以return了;也可以不管协议直接读，ATR中两个字节之间的间隔最长可以是9600etu，超时就认为ATR结束了。</p>

<h3>反向</h3>

<p>像NDS的卡数据是反向，可通过ATR第一个字节看出，一般判断0x03或0x3f为反向卡。反向指高低位倒过来，再取反(软件取反的话，可以通过查表的方式)</p>

<pre><code>0x03
0 0 0 0 0 0 1 1 先高低倒过来
1 1 0 0 0 0 0 0 再取反
0 0 1 1 1 1 1 1 0x3f
</code></pre>

<h3>数据传输</h3>

<p>一般来说传输一个字符要12个etu=1 START + 8 DATA + 1 PARITY + 2 GUARD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/02/linux-xue-xi/"/>
    <updated>2014-07-02T23:00:20+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/02/linux-xue-xi</id>
    <content type="html"><![CDATA[<h4>vim</h4>

<p>:vsplit 将窗口分成两个，ctrl+w切换<br/>
:edit 打开文件<br/>
:%!xxd -g 1 ：切换成十六进制的一个字节的模式  <br/>
u 撤销上一步的操作<br/>
ctrl+r 恢复上一步被撤销的操作 <br/>
shift+8 查找当前单词  <br/>
ggVG 全选 <br/>
vim xxx +N  打开文件并跳到第N行  <br/>
vim -d xx xxx 等同于 vimdiff xx xxx   <br/>
:set noro   取消只读，在git difftool时很有用  <br/>
dp将当前光标内容复制到另一窗口，do将另一窗口内容复制过来</p>

<h4>pkg-config</h4>

<pre><code>查找库文件：pkg-config --libs opencv
查看版本： pkg-config --modversion opencv
</code></pre>

<h4>cp</h4>

<p>连带目录一起复制： cp &ndash;parents -r xx/xx/xx/ xx/</p>

<h3>sed</h3>

<p>&lsquo;-i&#8217;使修改生效<br/>
a. 将old替换为new： sed &rsquo;s/old/new/g&rsquo; file -i<br/>
b. 删除第四行： sed &lsquo;4 d&rsquo; file<br/>
c. 在第三行后添加一行： sed &lsquo;3 a xxx&rsquo; file<br/>
d. 在第三行前添加一行： sed &lsquo;3 i xxx&rsquo; file</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/02/androidxue-xi/"/>
    <updated>2014-07-02T14:35:05+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/02/androidxue-xi</id>
    <content type="html"><![CDATA[<h2>Button</h2>

<p>使用Button的时候可以这么用：</p>

<pre><code>public class MainActivity extends Activity implements View.OnClickListener {
    ...
    Button btn_ok = (Button) findViewById(R.id.btn_ok);
    btn_ok.setOnClickListener(this);
}
</code></pre>

<p>实现onClick(View v)方法，而且费时的按键响应操作使用Handler做</p>

<pre><code>public void onClick(View v) {
    switch(v.getId()) {
    case R.id.btn_ok:
        Message m = new Message();
        m.what = XXXX;
        Bundle data = new Bundle();
        data.putString(XXX, XXXXX);
        m.setData(data);
        mHandler.sendMessage(m);
        break;
    }
}
</code></pre>

<p>mHandler的写法</p>

<pre><code>private Hander mHandler = new Hander() {
    public void handleMessage(Message msg) {
        switch(msg.what) {
        case XXX:
            String str = msg.getData().getString(XXX);
            break;
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Usb Host]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/01/android-usb-host/"/>
    <updated>2014-07-01T14:18:15+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/01/android-usb-host</id>
    <content type="html"><![CDATA[<h3>1. 检查系统是否开启了usb host功能</h3>

<pre><code>  确认/system/etc/permissions目录有android.hardware.usb.host.xml这个文件。
</code></pre>

<h3>2. 查找设备</h3>

<pre><code>在AndroidManifest.xml中添加：
&lt;intent-filter&gt;
    &lt;action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" /&gt;
&lt;/intent-filter&gt;
&lt;meta-data android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"
android:resource="@xml/device_filter" /&gt;
</code></pre>

<p>res/xml/device_filter.xml的内容如下，注意为10进制数</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;usb-device vendor-id="1234" product-id="5678" class="255" subclass="66" protocol="1" /&gt;
&lt;/resources&gt;
</code></pre>

<h4>方法1</h4>

<pre><code>在&lt;activity ...&gt;&lt;/activity&gt;之间加intent-filter之间，这样当USB设备插入时会启动这个Activity，通过
UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);获取设备
</code></pre>

<h4>方法2</h4>

<p>不用系统的广播的话，可以遍历设备列表，得到设备</p>

<pre><code>UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);
...
HashMap&lt;String, UsbDevice&gt; deviceList = manager.getDeviceList();
Iterator&lt;UsbDevice&gt; deviceIterator = deviceList.values().iterator();
while(deviceIterator.hasNext()){
    UsbDevice device = deviceIterator.next()
    //查找想要的设备
    if (device.getVenderId()==venderID &amp;&amp; device.getProductId==productId)
        //your code
}
</code></pre>

<p>通过UsbManager的requestPermission方法申请usb权限
manager.requestPermission(device, null);会弹出选择框让用户选择是否允许应用访问usb设备。</p>

<h3>3. 通信</h3>

<p>官网例子</p>

<pre><code>private Byte[] bytes
private static int TIMEOUT = 0;
private boolean forceClaim = true;
...
UsbInterface intf = device.getInterface(0);
UsbEndpoint endpoint = intf.getEndpoint(0);
UsbDeviceConnection connection = mUsbManager.openDevice(device); 
connection.claimInterface(intf, forceClaim);
connection.bulkTransfer(endpoint, bytes, bytes.length, TIMEOUT); //do in another thread
</code></pre>

<p>获取usb设备端点</p>

<pre><code>  UsbEndpoint ep = intf.getEndpoint(i);
  ep.getType() == UsbConstants.USB_ENDPOINT_XFER_INT;//中断
  ep.getDirection()==UsbConstants.USB_DIR_OUT;//相对主机来说
</code></pre>

<h4>使用UsbRequest</h4>

<p>发送</p>

<pre><code>ByteBuffer mOutData = ByteBuffer.allocate(len);
UsbRequest mUsbRequest = new UsbRequest();
mUsbRequest.initialize(connection, mEndpointOut);
mUsbRequest.queue(mOutData, len);
if (connection.requestWait()==mUsbRequest)
    //成功
</code></pre>

<p>接收，不知道为什么在4.2上mInData要ByteBuffer.allocate(len*2)</p>

<pre><code>//ByteBuffer mInData = ByteBuffer.allocate(len);//4.0
ByteBuffer mInData = ByteBuffer.allocate(len*2);
UsbRequest mUsbRequest = new UsbRequest();
mUsbRequest.initialize(connection, mEndpointIn);
mUsbRequest.queue(mInData, len);
if (connection.requestWait()==mUsbRequest)
    byte[] data = mInData.array();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试文章]]></title>
    <link href="http://zhangshy.github.io/blog/2014/06/28/ce-shi-wen-zhang/"/>
    <updated>2014-06-28T15:57:06+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/06/28/ce-shi-wen-zhang</id>
    <content type="html"><![CDATA[<p><img src="http://hd42.xiaonei.com/photos/hd42/20080422/19/21/large_3444b150.jpg" alt="girl" /></p>

<h2>archlinux安装</h2>

<h3>pacman</h3>

<pre><code>pacman -Sy abc                    和源同步后安装名为abc的包
pacman -S abc                     从本地数据库中得到abc的信息，下载安装abc包
pacman -Sf abc                    强制安装包abc
pacman -Ss abc                   搜索有关abc信息的包
pacman -Si abc                    从数据库中搜索包abc的信息
pacman -Syu                        同步源，并更新系统
pacman -Sy                          仅同步源
pacman -R abc                     删除abc包
pacman -Rc abc                   删除abc包和依赖abc的包
pacman -Rsn abc                 移除包所有不需要的依赖包并删除其配置文件
pacman -Sc                          清理/var/cache/pacman/pkg目录下的旧包
pacman -Scc                        清除所有下载的包和数据库
pacman -Sd abc                   忽略依赖性问题，安装包abc
pacman -Su --ignore foo       升级时不升级包foo
pacman -Sg abc                   查询abc这个包组包含的软件包
pacman -Q                           列出系统中所有的包
pacman -Q package             在本地包数据库搜索(查询)指定软件包
pacman -Qi package            在本地包数据库搜索(查询)指定软件包并列出相关信息
pacman -Q | wc -l                  统计当前系统中的包数量
pacman -Qdt                         找出孤立包
pacman -Rs $(pacman -Qtdq) 删除孤立软件包（递归的,小心用)
pacman -U   abc.pkg.tar.gz      安装下载的abs包，或新编译的本地abc包
pacman-optimize &amp;&amp; sync        提高数据库访问速度
</code></pre>

<h3>输入法fcitx</h3>

<pre><code>  按照例子安装fcitx后，还要安装pacman -S fcitx-googlepinyin。  
  配置输入法，在Input Method -&gt; 去掉Only Show Currentt Language勾 -&gt; 搜索Chinese 选择
</code></pre>

<h3>声音</h3>

<pre><code># pacman -S alsa-utils
# alsamixer
注意要[M] 取消静音
</code></pre>
]]></content>
  </entry>
  
</feed>
