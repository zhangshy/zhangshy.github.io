<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | 张帅依的博客]]></title>
  <link href="http://zhangshy.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://zhangshy.github.io/"/>
  <updated>2014-07-29T18:27:21+00:00</updated>
  <id>http://zhangshy.github.io/</id>
  <author>
    <name><![CDATA[张帅依]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objdump学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/29/objdumpxue-xi/"/>
    <updated>2014-07-29T09:36:08+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/29/objdumpxue-xi</id>
    <content type="html"><![CDATA[<h2>1. 简单程序hello world</h2>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char** argv) {
    printf("hello world!!\n");
    int a = 0x123;
    int b = 0x234;
    int c = a + b;
    printf("c is: 0x%x\n", c);
    return 0;
}
</code></pre>

<p>编译gcc hello.c -o hello</p>

<h3>1.1 gcc -S</h3>

<p>gcc hello.c -S -o hello.s     <br/>
查看hello.s内容cat hello.s</p>

<pre><code>    .file   "hello.c"
    .section        .rodata
.LC0:
    .string "hello world!!"
.LC1:
    .string "c is: 0x%x\n"
    .text
.globl main
    .type   main, @function
main:
.LFB0:
    .cfi_startproc
    pushq   %rbp
    .cfi_def_cfa_offset 16
    movq    %rsp, %rbp
    .cfi_offset 6, -16
    .cfi_def_cfa_register 6
    subq    $32, %rsp
    movl    %edi, -20(%rbp)
    movq    %rsi, -32(%rbp)
    movl    $.LC0, %edi
    call    puts
    movl    $291, -4(%rbp)
    movl    $564, -8(%rbp)
    movl    -8(%rbp), %eax
    movl    -4(%rbp), %edx
    leal    (%rdx,%rax), %eax
    movl    %eax, -12(%rbp)
    movl    $.LC1, %eax
    movl    -12(%rbp), %edx
    movl    %edx, %esi
    movq    %rax, %rdi
    movl    $0, %eax
    call    printf
    movl    $0, %eax
    leave
    ret
    .cfi_endproc
.LFE0:
    .size   main, .-main
    .ident  "GCC: (Ubuntu/Linaro 4.4.7-1ubuntu2) 4.4.7"
    .section        .note.GNU-stack,"",@progbits
</code></pre>

<h3>1.2 objdump指令</h3>

<h4>1.2.1 objdump -s hello</h4>

<p>显示所有section内容</p>

<pre><code>objdump -s -j .rodata hello

hello:     file format elf64-x86-64

Contents of section .rodata:
400688 01000200 68656c6c 6f20776f 726c6421  ....hello world!
400698 21006320 69733a20 30782578 0a00      !.c is: 0x%x..  
只显示.rodata部分
</code></pre>

<h4>1.2.2 objdump -S hello</h4>

<pre><code>objdump -S -j .rodata hello
hello:     file format elf64-x86-64

Disassembly of section .rodata:

0000000000400688 &lt;_IO_stdin_used&gt;:
400688:       01 00 02 00 68 65 6c 6c 6f 20 77 6f 72 6c 64 21     ....hello world!
400698:       21 00 63 20 69 73 3a 20 30 78 25 78 0a 00           !.c is: 0x%x..
</code></pre>

<h2>各段含义</h2>

<p><a href="http://blog.sina.com.cn/s/blog_8053938901014gih.html">汇编中bss,data,text,rodata,heap,stack,意义</a>    <br/>
bss段：</p>

<pre><code>BSS段（bsssegment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS是英文BlockStarted by Symbol的简称。BSS段属于静态内存分配。
</code></pre>

<p>data段：</p>

<pre><code>数据段（datasegment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。       
</code></pre>

<p>text段：</p>

<pre><code>代码段（codesegment/textsegment）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读,某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等
</code></pre>

<p>rodata段：</p>

<pre><code>存放C中的字符串和#define定义的常量
</code></pre>

<h2>ARM汇编</h2>

<p><a href="http://yulin724.wikidot.com/rwpaper:arm-assembly-instructions#toc12">ARM汇编指令集</a></p>

<h4>BL</h4>

<p>BL是arm汇编中用来调用子程序的指令，它把BL后面一条指令的地址放到R14寄存器里，R15寄存器(PC当前指针地址)就设置成要跳往的地址。这样在这个子程序返回时，再mov PC, R14就可以返回到BL后面的地址了</p>

<h4>BEQ</h4>

<p>BEQ指定是跳转指令，但是跳转要满足一定的条件，例：CMP    R1，#0    BEQ  Label    即当R1和0相等的时候程序跳到标号Label处执行。BEQ执行后不调回去。</p>

<h4>LDR/STR</h4>

<p>ARM是RISC结构，数据从内存到CPU之间的移动只能通过L/S指令来完成，也就是ldr/str指令。比如想把数据从内存中某处读取到寄存器中，只能使用ldr，比如：</p>

<pre><code>ldr r0, 0x12345678
</code></pre>

<p>就是把0x12345678这个地址中的值存放到r0中。而mov不能干这个活，mov只能在寄存器之间移动数据，或者把立即数移动到寄存器中，这个和x86这种CISC架构的芯片区别最大的地方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git使用]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/21/gitshi-yong/"/>
    <updated>2014-07-21T11:48:05+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/21/gitshi-yong</id>
    <content type="html"><![CDATA[<h3>在git status时显示与origin/master的比较</h3>

<p>在git status时显示Your branch is ahead of &lsquo;origin/master&rsquo; by 1 commit</p>

<pre><code>git branch --set-upstream master  origin/master
</code></pre>
]]></content>
  </entry>
  
</feed>
