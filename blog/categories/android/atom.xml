<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 张帅依的博客]]></title>
  <link href="http://zhangshy.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://zhangshy.github.io/"/>
  <updated>2014-10-13T18:55:26+00:00</updated>
  <id>http://zhangshy.github.io/</id>
  <author>
    <name><![CDATA[张帅依]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NDK编译zlib和libpng]]></title>
    <link href="http://zhangshy.github.io/blog/2014/09/26/ndkbian-yi-zlibhe-libpng/"/>
    <updated>2014-09-26T16:01:23+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/09/26/ndkbian-yi-zlibhe-libpng</id>
    <content type="html"><![CDATA[<p>下载zlib-1.2.8.tar.xz和libpng-1.6.13.tar.xz，解压tar -xJvf xx.tar.xz</p>

<h3>编译zlib</h3>

<p>编写zlibbuild.mk文件，对照源码下的win32/Makefile.gcc文件填写LOCAL_SRC_FILES项：</p>

<pre><code>LOCAL_PATH:= $(call my-dir)  

include $(CLEAR_VARS)  

LOCAL_SRC_FILES := \
    adler32.c \
    compress.c \
    crc32.c \
    deflate.c \
    gzclose.c \
    gzlib.c \
    gzread.c \
    gzwrite.c \
    infback.c \
    inffast.c \
    inflate.c \
    inftrees.c \
    trees.c \
    uncompr.c \
    zutil.c  

LOCAL_MODULE:= libz  

include $(BUILD_STATIC_LIBRARY)
</code></pre>

<p>编写build文件</p>

<pre><code>ndk-build \
NDK_PROJECT_PATH=`pwd` \
APP_ABI=armeabi-v7a \
APP_PLATFORM=android-14 \
APP_BUILD_SCRIPT=`pwd`/zlibbuild.mk \
TARGET_PRODUCT=alltarget \
$@
</code></pre>

<p>执行. build编译</p>

<h3>编译libpng</h3>

<p>参照源码下的scripts/makefile.gcc文件填写LOCAL_SRC_FILES项：</p>

<pre><code>LOCAL_PATH := $(call my-dir)
include $(CLEAR_VARS)

LOCAL_SRC_FILES := \
    png.c \
    pngerror.c \
    pngget.c \
    pngmem.c \
    pngpread.c \
    pngread.c \
    pngrio.c \
    pngrtran.c \
    pngrutil.c \
    pngset.c \
    pngtrans.c \
    pngwio.c \
    pngwrite.c \
    pngwtran.c \
    pngwutil.c

LOCAL_MODULE := libpng

LOCAL_LDLIBS := -lz

include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>编译时提示缺少pnglibconf.h文件，解决办法使用源码下的scripts/pnglibconf.h.prebuilt文件，ln -s scripts/pnglibconf.h.prebuilt pnglibconf.h</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DexClassLoader动态加载]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/08/dexclassloaderdong-tai-jia-zai/"/>
    <updated>2014-08-08T11:40:07+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/08/dexclassloaderdong-tai-jia-zai</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/over140/archive/2011/11/23/2259367.html">Android动态加载jar/dex</a>      <br/>
<a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823">Android中的动态加载机制</a>   <br/>
<a href="https://github.com/zhangshy/myTest/tree/master/DexClassLoaderTest">示例代码</a></p>

<h2>1. 准备dex文件</h2>

<h3>1.1 编写</h3>

<p>接口：</p>

<pre><code>package com.dex.test;

public interface IDextest {
    public String getDexString();
}
</code></pre>

<p>实现：</p>

<pre><code>package com.dex.test;

public class Dextest implements IDextest{
    @Override
    public String getDexString() {
        return "here dex test!!";
    }
}
</code></pre>

<h3>1.2 导出jar包</h3>

<p><img src="/images/cap_jar.jpg" alt="导出jar包" />     <br/>
导出时不用选择接口文件。</p>

<h3>1.3 使用dx转换</h3>

<p>dx在sdk/build-tools/android-4.4.2/下，执行/opt/android/sdk/build-tools/android-4.4.2/dx &ndash;dex &ndash;output=test.jar dextest.jar</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Binder编写]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/06/android-binderbian-xie/"/>
    <updated>2014-08-06T11:35:45+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/06/android-binderbian-xie</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html">Android深入浅出之Binder机制</a>  <br/>
<a href="https://github.com/zhangshy/myTest/tree/master/binder">我的例子</a></p>

<pre><code>使用NDK编译多模块时编译顺序和要生成的文件的首字母有关？
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Jni编写]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/14/android-jnibian-xie/"/>
    <updated>2014-07-14T11:26:26+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/14/android-jnibian-xie</id>
    <content type="html"><![CDATA[<h3>java文件编写</h3>

<pre><code>package com.example.jni

public class Testjni {
    public native int jniRead(byte[] data, int len);
    public native int jniWrite(byte[] data, int len);
    static {
        System.loadLibrary("myJni");
    }
}
</code></pre>

<h3>jni文件编写</h3>

<p>jni文件的函数名要和java中的方法名对应起来，在jni中申请的空间要注意释放。</p>

<pre><code>#include &lt;jni.h&gt;
#include &lt;android/log.h&gt;

#define LOG_TAG "myJni.c"
#define LOGI(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA__ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA__ARGS__)

jint Java_com_example_jni_jniRead(JNIEnv *env, jobject thiz,
    jbyteArray receiveBuf, jint slen) {
    uint8_t p_recv_buf[256] = {0};
    int len = slen;
    len = read(fd, p_recv_buf, slen);
    LOGI("rea len:%d\n", len);
    (*env)-&gt;setByteArrayRegion(env, receiveBuf, 0, len,
        (const jbyte*)p_recv_buf);
    return len;
}

jint Java_com_example_jni_jniWrite(JNIEnv *env, jobject thiz,
    jbyteArray sendBuf, jint len) {
    //申请空间
    jbyte *sendelems = (*env)-&gt;GetByteArrayElements(env, sendBuf, NULL);
    ...//处理函数
    //释放
    (*env)-&gt;ReleaseByteArrayElements(env, sendBuf, sendelems, 0);
    return 0;
}
</code></pre>

<h3>Android.mk</h3>

<pre><code>LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_MODULE_TAGS := optional
LOCAL_SRC_FILES:= \
    myJni.c
LOCAL_LDLIBS := -llog

LOCAL_SHARED_LIBRARIES += libam_adp liblog libcutils
LOCAL_C_INCLUDES += ../inc
#编译生成libmyJni.so
LOCAL_MODULE := libmyJni
#编译动态库
include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>执行mm编译。（菜鸟级别解释：:=是赋值的意思，+=是追加的意思，$是引用某变量的值）补充说明：BUILD_EXECUTABLE表示以一个可执行程序的方式进行编译，include $(BUILD_PACKAGE)则是编译出一个apk，include $(BUILD_STATIC_JAVA_LIBRARY)则是编译出jar包。</p>

<h4>LOCAL_MODULE_TAGS说明</h4>

<p>LOCAL_MODULE_TAGS ：=user eng tests optional  <br/>
user: 指该模块只在user版本下才编译    <br/>
eng: 指该模块只在eng版本下才编译      <br/>
tests: 指该模块只在tests版本下才编译      <br/>
optional:指该模块在所有版本下都编译   <br/>
我一般都使用optional</p>

<h2>我的例子</h2>

<h3>javah生成h文件</h3>

<p>在src目录下执行javah -jni com.example.jni.Getso后生成com_example_jni_Getso.h</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/02/androidxue-xi/"/>
    <updated>2014-07-02T14:35:05+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/02/androidxue-xi</id>
    <content type="html"><![CDATA[<h2>包属性</h2>

<h3>sharedUserId</h3>

<p>使用sharedUserId属性时取值需要包含点（dot），如android:sharedUserId=&ldquo;test"安装时会提示：Failure [INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID]。使用android:sharedUserId="zsy.test"就可以了。</p>

<h2>Handler和HandlerThread</h2>

<p>Handler会关联一个单独的线程和消息队列。Handler默认关联主线程，会在主线程执行，如果在这里面的操作会有阻塞，界面也会卡住。如果要在其他线程执行，可以使用HandlerThread</p>

<pre><code>HandlerThread mHandlerThread = new HandlerThread("test");
mHandlerThread.start();
Handler mHandler = new Handler(mHandlerThread.getLooper()) {
    public void handlerMessage(Message msg) {
        XXX
    }
};
</code></pre>

<p>当要停止mHandlerThread时可执行：</p>

<pre><code>mHandlerThread.quit();
</code></pre>

<h2>Thread和Runnable</h2>

<p><a href="http://developer.51cto.com/art/201203/321042.htm">Java中Runnable和Thread的区别</a></p>

<p>在java中可有两种方式实现多线程，一种是继承Thread类，一种是实现Runnable接口；Thread类是在java.lang包中定义的。一个类只要继承了Thread类同时覆写了本类中的run()方法就可以实现多线程操作了，但是一个类只能继承一个父类，这是此方法的局限</p>

<p>在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：1.避免点继承的局限，一个类可以继承多个接口;2.适合于资源的共享</p>

<pre><code>package org.demo.runnable;  
class MyThread implements Runnable{  
    private int ticket=10;  
    public void run(){  
        for(int i=0;i&lt;20;i++){  
            if(this.ticket&gt;0){  
                System.out.println("卖票：ticket"+this.ticket--);  
            }  
        }  
    }  
}  
package org.demo.runnable;  
public class RunnableTicket {  
    public static void main(String[] args) {  
        MyThread mt=new MyThread();  
        new Thread(mt).start();//同一个mt，但是在Thread中就不可以，如果用同一  
        new Thread(mt).start();//个实例化对象mt，就会出现异常  
        new Thread(mt).start();  
    }  
}; 
</code></pre>

<h2>Button</h2>

<p>使用Button的时候可以这么用：</p>

<pre><code>public class MainActivity extends Activity implements View.OnClickListener {
    ...
    Button btn_ok = (Button) findViewById(R.id.btn_ok);
    btn_ok.setOnClickListener(this);
}
</code></pre>

<p>实现onClick(View v)方法，而且费时的按键响应操作使用Handler做</p>

<pre><code>public void onClick(View v) {
    switch(v.getId()) {
    case R.id.btn_ok:
        Message m = new Message();
        m.what = XXXX;
        Bundle data = new Bundle();
        data.putString(XXX, XXXXX);
        m.setData(data);
        mHandler.sendMessage(m);
        break;
    }
}
</code></pre>

<p>mHandler的写法</p>

<pre><code>private Handler mHandler = new Handler() {
    public void handleMessage(Message msg) {
        switch(msg.what) {
        case XXX:
            String str = msg.getData().getString(XXX);
            break;
        }
    }
}
</code></pre>

<h2>像素</h2>

<p><a href="http://www.cnblogs.com/bjzhanghao/archive/2012/11/06/2757300.html">px、dp和sp，这些单位有什么区别？</a><br/>
px指屏幕上物理像素点，不建议使用;
   因为100px的图片在不同手机上显示的实际大小可能不同</p>

<pre><code>You would use:    
    sp for font sizes
    dip for everything else.    
    dip==dp
</code></pre>

<h2>adb及常用调试指令</h2>

<p>开启adb功能：start adbd   <br/>
查看设备：adb devices     <br/>
多于一个设备时指定设备：adb -s 192.168.11.84:5555 shell     <br/>
启动应用某界面：am start com.example.test/.MainActivity   <br/>
命令行安装应用：pm install xxx.apk    <br/>
命令行卸载应用：pm uninstall com.example.test     <br/>
启动模拟器：./emulator -avd test -memory 512 -partition-size 256  启动名称为test的模拟器，rom大小256M</p>

<h2>分析工具dumpsys</h2>

<p>dumpsys用来给出android应用程序的信息：</p>

<pre><code>dumpsys [Option]
        meminfo 内存信息
        cpuinfo cpu信息
        等很多选项
service list可以列出服务
</code></pre>

<h3>mat使用</h3>

<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-ecl-ma/index.html">安装配置</a>   <br/>
<a href="http://stackoverflow.com/questions/3999087/how-to-enable-heap-updates-on-my-android-client">How to enable Heap updates on my android client</a></p>

<h2>签名文件</h2>

<p>生成签名文件</p>

<pre><code>keytool -genkey -alias sign.keystore -keyalg RSA -validity 20000 -keystore sign.keystore
</code></pre>

<p>签名</p>

<pre><code>jarsigner -verbose -keystore sign.keystore -signedjar xxx_signed.apk xxx.apk sign.keystore
</code></pre>
]]></content>
  </entry>
  
</feed>
