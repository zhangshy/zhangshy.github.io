<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 张帅依的博客]]></title>
  <link href="http://zhangshy.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://zhangshy.github.io/"/>
  <updated>2014-07-25T17:01:22+00:00</updated>
  <id>http://zhangshy.github.io/</id>
  <author>
    <name><![CDATA[张帅依]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Jni编写]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/14/android-jnibian-xie/"/>
    <updated>2014-07-14T11:26:26+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/14/android-jnibian-xie</id>
    <content type="html"><![CDATA[<h3>java文件编写</h3>

<pre><code>package com.example.jni

public class Testjni {
    public native int jniRead(byte[] data, int len);
    public native int jniWrite(byte[] data, int len);
    static {
        System.loadLibrary("myJni");
    }
}
</code></pre>

<h3>jni文件编写</h3>

<p>jni文件的函数名要和java中的方法名对应起来，在jni中申请的空间要注意释放。</p>

<pre><code>#include &lt;jni.h&gt;
#include &lt;android/log.h&gt;

#define LOG_TAG "myJni.c"
#define LOGI(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA__ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA__ARGS__)

jint Java_com_example_jni_jniRead(JNIEnv *env, jobject thiz,
    jbyteArray receiveBuf, jint slen) {
    uint8_t p_recv_buf[256] = {0};
    int len = slen;
    len = read(fd, p_recv_buf, slen);
    LOGI("rea len:%d\n", len);
    (*env)-&gt;setByteArrayRegion(env, receiveBuf, 0, len,
        (const jbyte*)p_recv_buf);
    return len;
}

jint Java_com_example_jni_jniWrite(JNIEnv *env, jobject thiz,
    jbyteArray sendBuf, jint len) {
    //申请空间
    jbyte *sendelems = (*env)-&gt;GetByteArrayElements(env, sendBuf, NULL);
    ...//处理函数
    //释放
    (*env)-&gt;ReleaseByteArrayElements(env, sendBuf, sendelems, 0);
    return 0;
}
</code></pre>

<h3>Android.mk</h3>

<pre><code>LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_MODULE_TAGS := optional
LOCAL_SRC_FILES:= \
    myJni.c
LOCAL_LDLIBS := -llog

LOCAL_SHARED_LIBRARIES += libam_adp liblog libcutils
LOCAL_C_INCLUDES += ../inc
#编译生成libmyJni.so
LOCAL_MODULE := libmyJni
#编译动态库
#include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>执行mm编译。（菜鸟级别解释：:=是赋值的意思，+=是追加的意思，$是引用某变量的值）补充说明：BUILD_EXECUTABLE表示以一个可执行程序的方式进行编译，include $(BUILD_PACKAGE)则是编译出一个apk，include $(BUILD_STATIC_JAVA_LIBRARY)则是编译出jar包。</p>

<h4>LOCAL_MODULE_TAGS说明</h4>

<p>LOCAL_MODULE_TAGS ：=user eng tests optional  <br/>
user: 指该模块只在user版本下才编译    <br/>
eng: 指该模块只在eng版本下才编译      <br/>
tests: 指该模块只在tests版本下才编译      <br/>
optional:指该模块在所有版本下都编译   <br/>
我一般都使用optional</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/02/androidxue-xi/"/>
    <updated>2014-07-02T14:35:05+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/02/androidxue-xi</id>
    <content type="html"><![CDATA[<h2>包属性</h2>

<h3>sharedUserId</h3>

<p>使用sharedUserId属性时取值需要包含点（dot），如android:sharedUserId=&ldquo;test"安装时会提示：Failure [INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID]。使用android:sharedUserId="zsy.test"就可以了。</p>

<h2>Handler和HandlerThread</h2>

<p>Handler会关联一个单独的线程和消息队列。Handler默认关联主线程，会在主线程执行，如果在这里面的操作会有阻塞，界面也会卡住。如果要在其他线程执行，可以使用HandlerThread</p>

<pre><code>HandlerThread mHandlerThread = new HandlerThread("test");
mHandlerThread.start();
Handler mHandler = new Handler(mHandlerThread.getLooper()) {
    public void handlerMessage(Message msg) {
        XXX
    }
};
</code></pre>

<p>当要停止mHandlerThread时可执行：</p>

<pre><code>mHandlerThread.quit();
</code></pre>

<h2>Thread和Runnable</h2>

<p><a href="http://developer.51cto.com/art/201203/321042.htm">Java中Runnable和Thread的区别</a></p>

<p>在java中可有两种方式实现多线程，一种是继承Thread类，一种是实现Runnable接口；Thread类是在java.lang包中定义的。一个类只要继承了Thread类同时覆写了本类中的run()方法就可以实现多线程操作了，但是一个类只能继承一个父类，这是此方法的局限</p>

<p>在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：1.避免点继承的局限，一个类可以继承多个接口;2.适合于资源的共享</p>

<pre><code>package org.demo.runnable;  
class MyThread implements Runnable{  
    private int ticket=10;  
    public void run(){  
        for(int i=0;i&lt;20;i++){  
            if(this.ticket&gt;0){  
                System.out.println("卖票：ticket"+this.ticket--);  
            }  
        }  
    }  
}  
package org.demo.runnable;  
public class RunnableTicket {  
    public static void main(String[] args) {  
        MyThread mt=new MyThread();  
        new Thread(mt).start();//同一个mt，但是在Thread中就不可以，如果用同一  
        new Thread(mt).start();//个实例化对象mt，就会出现异常  
        new Thread(mt).start();  
    }  
}; 
</code></pre>

<h2>Button</h2>

<p>使用Button的时候可以这么用：</p>

<pre><code>public class MainActivity extends Activity implements View.OnClickListener {
    ...
    Button btn_ok = (Button) findViewById(R.id.btn_ok);
    btn_ok.setOnClickListener(this);
}
</code></pre>

<p>实现onClick(View v)方法，而且费时的按键响应操作使用Handler做</p>

<pre><code>public void onClick(View v) {
    switch(v.getId()) {
    case R.id.btn_ok:
        Message m = new Message();
        m.what = XXXX;
        Bundle data = new Bundle();
        data.putString(XXX, XXXXX);
        m.setData(data);
        mHandler.sendMessage(m);
        break;
    }
}
</code></pre>

<p>mHandler的写法</p>

<pre><code>private Handler mHandler = new Handler() {
    public void handleMessage(Message msg) {
        switch(msg.what) {
        case XXX:
            String str = msg.getData().getString(XXX);
            break;
        }
    }
}
</code></pre>

<h2>像素</h2>

<p><a href="http://www.cnblogs.com/bjzhanghao/archive/2012/11/06/2757300.html">px、dp和sp，这些单位有什么区别？</a><br/>
px指屏幕上物理像素点，不建议使用;
   因为100px的图片在不同手机上显示的实际大小可能不同</p>

<pre><code>You would use:    
    sp for font sizes
    dip for everything else.    
    dip==dp
</code></pre>

<h2>adb及常用调试指令</h2>

<p>开启adb功能：start adbd   <br/>
查看设备：adb devices     <br/>
多于一个设备时指定设备：adb -s 192.168.11.84:5555 shell     <br/>
启动应用某界面：am start com.example.test/.MainActivity   <br/>
命令行安装应用：pm install xxx.apk    <br/>
命令行卸载应用：pm uninstall com.example.test</p>

<h2>分析工具dumpsys</h2>

<p>dumpsys用来给出android应用程序的信息：</p>

<pre><code>dumpsys [Option]
        meminfo 内存信息
        cpuinfo cpu信息
        等很多选项
service list可以列出服务
</code></pre>

<h3>mat使用</h3>

<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-ecl-ma/index.html">安装配置</a>   <br/>
<a href="http://stackoverflow.com/questions/3999087/how-to-enable-heap-updates-on-my-android-client">How to enable Heap updates on my android client</a></p>

<h2>签名文件</h2>

<p>生成签名文件</p>

<pre><code>keytool -genkey -alias sign.keystore -keyalg RSA -validity 20000 -keystore sign.keystore
</code></pre>

<p>签名</p>

<pre><code>jarsigner -verbose -keystore sign.keystore -signedjar xxx_signed.apk xxx.apk sign.keystore
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Usb Host]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/01/android-usb-host/"/>
    <updated>2014-07-01T14:18:15+00:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/01/android-usb-host</id>
    <content type="html"><![CDATA[<h3>1. 检查系统是否开启了usb host功能</h3>

<pre><code>  确认/system/etc/permissions目录有android.hardware.usb.host.xml这个文件。
</code></pre>

<h3>2. 查找设备</h3>

<pre><code>在AndroidManifest.xml中添加：
&lt;intent-filter&gt;
    &lt;action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" /&gt;
&lt;/intent-filter&gt;
&lt;meta-data android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"
android:resource="@xml/device_filter" /&gt;
</code></pre>

<p>res/xml/device_filter.xml的内容如下，注意为10进制数</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;usb-device vendor-id="1234" product-id="5678" class="255" subclass="66" protocol="1" /&gt;
&lt;/resources&gt;
</code></pre>

<h4>方法1</h4>

<pre><code>在&lt;activity ...&gt;&lt;/activity&gt;之间加intent-filter之间，这样当USB设备插入时会启动这个Activity，通过
UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);获取设备
</code></pre>

<h4>方法2</h4>

<p>不用系统的广播的话，可以遍历设备列表，得到设备</p>

<pre><code>UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);
...
HashMap&lt;String, UsbDevice&gt; deviceList = manager.getDeviceList();
Iterator&lt;UsbDevice&gt; deviceIterator = deviceList.values().iterator();
while(deviceIterator.hasNext()){
    UsbDevice device = deviceIterator.next()
    //查找想要的设备
    if (device.getVenderId()==venderID &amp;&amp; device.getProductId==productId)
        //your code
}
</code></pre>

<p>通过UsbManager的requestPermission方法申请usb权限
manager.requestPermission(device, null);会弹出选择框让用户选择是否允许应用访问usb设备。</p>

<h3>3. 通信</h3>

<p>官网例子</p>

<pre><code>private Byte[] bytes
private static int TIMEOUT = 0;
private boolean forceClaim = true;
...
UsbInterface intf = device.getInterface(0);
UsbEndpoint endpoint = intf.getEndpoint(0);
UsbDeviceConnection connection = mUsbManager.openDevice(device); 
connection.claimInterface(intf, forceClaim);
connection.bulkTransfer(endpoint, bytes, bytes.length, TIMEOUT); //do in another thread
</code></pre>

<p>获取usb设备端点</p>

<pre><code>  UsbEndpoint ep = intf.getEndpoint(i);
  ep.getType() == UsbConstants.USB_ENDPOINT_XFER_INT;//中断
  ep.getDirection()==UsbConstants.USB_DIR_OUT;//相对主机来说
</code></pre>

<h4>使用UsbRequest</h4>

<p>发送</p>

<pre><code>ByteBuffer mOutData = ByteBuffer.allocate(len);
UsbRequest mUsbRequest = new UsbRequest();
mUsbRequest.initialize(connection, mEndpointOut);
mUsbRequest.queue(mOutData, len);
if (connection.requestWait()==mUsbRequest)
    //成功
</code></pre>

<p>接收，不知道为什么在4.2上mInData要ByteBuffer.allocate(len*2)</p>

<pre><code>//ByteBuffer mInData = ByteBuffer.allocate(len);//4.0
ByteBuffer mInData = ByteBuffer.allocate(len*2);
UsbRequest mUsbRequest = new UsbRequest();
mUsbRequest.initialize(connection, mEndpointIn);
mUsbRequest.queue(mInData, len);
if (connection.requestWait()==mUsbRequest)
    byte[] data = mInData.array();
</code></pre>
]]></content>
  </entry>
  
</feed>
