<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 张帅依的博客]]></title>
  <link href="http://zhangshy.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://zhangshy.github.io/"/>
  <updated>2014-09-22T05:17:58+08:00</updated>
  <id>http://zhangshy.github.io/</id>
  <author>
    <name><![CDATA[张帅依]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux多线程编程]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/06/linuxduo-xian-cheng-bian-cheng/"/>
    <updated>2014-08-06T01:28:29+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/06/linuxduo-xian-cheng-bian-cheng</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/BiffoLee/archive/2011/11/18/2254540.html">linux多线程编程</a></p>

<h3>pthread_create</h3>

<pre><code>void *test_thread(void *arg) {
    int *num = (int *)arg;  //可以得到参数
}

pthread_t thread_id;
int testNum=1;
pthread_create(&amp;thread_id, NULL, test_thread, (void *)&amp;testNum);
</code></pre>

<h3>pthread_detach与pthread_join</h3>

<p>调用pthread_join(pthread_id)后，如果该线程没有运行结束，调用者会被阻塞;这时可以在子线程中加入代码    <br/>
pthread_detach(pthread_self())    <br/>
或者父线程调用    <br/>
pthread_detach(thread_id)（非阻塞，可立即返回）   <br/>
这将该子线程的状态设置为detached,则该线程运行结束后会自动释放所有资源</p>

<h3>pthread_cond_wait</h3>

<p><a href="http://baike.baidu.com/view/5725833.htm?fr=aladdin">pthread_cond_wait</a>   <br/>
条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个线程等待"条件变量的条件成立"而挂起；另一个线程使"条件成立"（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。</p>

<pre><code>pthread_mutex_t mutex;
pthread_cond_t cond;
pthread_mutex_init(&amp;mutex, NULL);
pthread_cond_init(&amp;cond, NULL);

//等待
pthread_mutex_lock(&amp;mutex);
pthread_cond_wait(&amp;cond, &amp;mutex);
pthread_mutex_unlock(&amp;mutex)
//激活
pthread_mutex_lock(&amp;mutex);
pthread_cond_signal(&amp;cond);
pthread_mutex_unlock(&amp;mutex);
//注销
pthread_mutex_destroy(&amp;mutex);
pthread_cond_destroy(&amp;cond);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[环形buffer]]></title>
    <link href="http://zhangshy.github.io/blog/2014/08/05/huan-xing-buffer/"/>
    <updated>2014-08-05T00:00:14+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/08/05/huan-xing-buffer</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/zhangshy/myTest/blob/master/ringBuffer/ringBuffer.c">示例代码</a></p>

<h3>定义</h3>

<pre><code>#define BUFFER_SIZE 0xF 
typedef struct {
    uint32_t wptr;   ///&lt; buffer存储位置，索引范围：[0:2*BUFFER_SIZE+1]
    uint32_t rptr;   ///&lt; buffer读取位置，索引范围：[0:2*BUFFER_SIZE+1]
    uint8_t buffer[BUFFER_SIZE+1];  ///&lt; buffer大小为BUFFER_SIZE+1
}ring_buffer_t; 
</code></pre>

<h3>使用</h3>

<p>若BUFFER_SIZE=3，wptr和rptr的索引为[0:7]  <br/>
1. wptr=rptr时buffer为空      <br/>
2. wptr和rptr之间的差值为BUFFER_SIZE+1即4时buffer为满     <br/>
3. wptr和rptr的范围通过pbuf->wptr &amp;= (BUFFER_SIZE&lt;&lt;1)|0x1 确定，BUFFER_SIZE的取值应该是N个2进制1？？</p>

<pre><code>__inline uint32_t ring_buffer_is_empty(ring_buffer_t *pbuf) {
    return (pbuf-&gt;wptr==pbuf-&gt;rptr);
}

__inline uint32_t ring_buffer_is_full(ring_buffer_t *pbuf) {
    return ((pbuf-&gt;wptr^pbuf-&gt;rptr)==(BUFFER_SIZE+1));
}

__inline void ring_buffer_flush(ring_buffer_t *pbuf) {
    pbuf-&gt;wptr = pbuf-&gt;rptr = 0;
}

void fill_ring_buffer(ring_buffer_t *pbuf, uint8_t data) {
    pbuf-&gt;buffer[pbuf-&gt;wptr&amp;BUFFER_SIZE] = data;
    pbuf-&gt;wptr++;
    pbuf-&gt;wptr &amp;= (BUFFER_SIZE&lt;&lt;1)|0x1;
}

uint8_t dump_ring_buffer(ring_buffer_t *pbuf) {
    uint8_t data;
    data = pbuf-&gt;buffer[pbuf-&gt;rptr&amp;BUFFER_SIZE];
    pbuf-&gt;rptr++;
    pbuf-&gt;rptr &amp;= (BUFFER_SIZE&lt;&lt;1)|0x1;

    return data;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux驱动]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/10/linuxqu-dong/"/>
    <updated>2014-07-10T00:08:06+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/10/linuxqu-dong</id>
    <content type="html"><![CDATA[<h3>交叉编译</h3>

<p>编译ko文件</p>

<pre><code>Makefile:
PWD=$(shell pwd)
KDIR=/xx/xx/linux-3.4

obj-m+=scr.o
scr-objs := file1.o file2.o test-scr.o

build:
    $(MAKE) -C $(KDIR) M=$(PWD)

clean:
    @rm -rf *.o *.ko *.cmd *.mod.c *.order *.symvers *.tmp_versions *~
</code></pre>

<p>执行编译：</p>

<pre><code>make ARCH=arm CROSS_COMPILE=/xx/xx/arm-linux-gnueabi-
</code></pre>

<h3>创建设备</h3>

<p>class_create和device_create函数，在/dev下创建设备节点</p>

<pre><code>int my_device_major = register_chrdev(0, "myDevice", &amp;my_device_fops);
struct class* my_device_class = class_create(THIS_MODULE, "myDevice");
//在/sys/class下创建了myDevice目录
if (IS_ERR(my_device_class))
    return -1;
device_create(my_device_class, NULL, MKDEV(my_device_major, 0), NULL, "myDevice");
//在/dev下创建myDevice设备
</code></pre>

<h3>自旋锁spinlock_t</h3>

<p>spin_lock_irqsave会关闭中断</p>

<pre><code>spinlock_t rx_slock;
spin_lock_init(&amp;rx_slock);  //初始化
/* 使用 */
unsigned long flags;
spin_lock_irqsave(&amp;rx_slock, flags);
...
//处理
...
spin_unlock_irqrestpre(&amp;rx_slock, flags);
</code></pre>

<h3>poll</h3>

<h4>驱动poll_wait</h4>

<pre><code>wait_queue_head_t rd_wq;
init_waitqueue_head(&amp;rd_wq);

unsigned int test_poll(struct file *filp, struct poll_table_struct *wait){
    unsigned int ret = 0;
    poll_wait(filp, &amp;rd_wq, wait);
    ...//处理
    if (hasData) ret |= POLLIN|POLLRDNORM;
    return ret;
}

当收到数后：wake_up_interruptible(&amp;rd_wq);
</code></pre>

<h4>应用poll</h4>

<pre><code>int fd = open("/dev/xxx", O_RDWR);
uint32_t timeout = xxxxx;
struct pollfd pfd;
pfd.fd = fd;
pfd.events = POLLIN;
ret = poll(&amp;pfd, 1, timeout);
if (ret!=1)
    return -1;
ret = read(fd, (void*)data, *size);
</code></pre>

<h3>workqueue工作队列在中断中使用</h3>

<p>使用：在有大量的中断处理中，需要紧急处理的中断直接在中断处理函数中进行，可以延迟处理的中断放到了workqueue中做，（不知这样对不对，我看网上还有一种tasklet）。workqueue的使用：</p>

<pre><code>struct work_struct device_work;
struct workqueue_struct *device_wq;

void device_work_func(struct work_struct *work) {
    ...//处理中断的函数
}
//中断回调函数
irqreturn_t device_irq_service(int irqno, void *dev_id) {
    unsigned int temp;
    unsinged long flags;
    //加锁
    spin_lock_irqsave(&amp;rx_slock, flags);
    temp = my_get_device_interrupt_status();//一般都可以从寄存器中读到中断状态
    if (temp&amp;MY_DEVICE_IMMEDIATE) { //需要立即处理的紧急中断
        ...//中断处理
    } else {
        queue_work(device_wq, &amp;device_work);
    }
    spin_unlock_irqrestpre(&amp;rx_slock, flags);
}

//初始化
device_wq = create_singlethread_workqueue("device_wq");//只创建一个内核线程
INIT_WORK(&amp;device_work, device_work_func);
request_irq(my_irq_no, device_irq_service, 0, "my_device", NULL);//注册中断服务
</code></pre>

<p>补充：
1. 中断处理中尽量不要加打印;
2. 在硬中断处理函数device_irq_service中不能使用mutex_lock，如果必须加锁可使用自旋锁spinlock_t; 在软中断
函数device_work_func中可以加mutex_lock</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 学习]]></title>
    <link href="http://zhangshy.github.io/blog/2014/07/03/linux-xue-xi/"/>
    <updated>2014-07-03T07:00:20+08:00</updated>
    <id>http://zhangshy.github.io/blog/2014/07/03/linux-xue-xi</id>
    <content type="html"><![CDATA[<h4>vim</h4>

<p>:vsplit 将窗口分成两个，ctrl+w切换<br/>
:edit 打开文件<br/>
:%!xxd -g 1 ：切换成十六进制的一个字节的模式  <br/>
u 撤销上一步的操作<br/>
ctrl+r 恢复上一步被撤销的操作 <br/>
shift+8 查找当前单词  <br/>
ggVG 全选 <br/>
q: 进入命令历史编辑   <br/>
vim xxx +N  打开文件并跳到第N行  <br/>
vim -d xx xxx 等同于 vimdiff xx xxx   <br/>
:set noro   取消只读，在git difftool时很有用  <br/>
dp将当前光标内容复制到另一窗口，do将另一窗口内容复制过来</p>

<h4>tar</h4>

<p>查看内容不解压：tar tvf xxx.tar.gz<br/>
解压：tar -xzvf xxx.tar.gz<br/>
解压到指定目录：tar -xzvf xxx.tar.gz -C /XX/XXX   <br/>
压缩：tar -czvf xxx.tar.gz xxx/   <br/>
解压：tar -xjvf xxx.tar.bz2</p>

<h4>mount</h4>

<p>mount后让普通用户有读写权限，加参数-o umask=000</p>

<pre><code>sudo mount /dev/sdb1 /mnt/ -o umask=000
</code></pre>

<p>挂载linux网络设备</p>

<pre><code>mount -t nfs -o nolock 192.168.0.188:/share /mnt
</code></pre>

<h4>pkg-config</h4>

<pre><code>查看头文件：pkg-config --cflags opencv
查找库文件：pkg-config --libs opencv
查看版本： pkg-config --modversion opencv
</code></pre>

<h4>cp</h4>

<p>连带目录一起复制： cp &ndash;parents -r xx/xx/xx/ xx/</p>

<h3>sed</h3>

<p>&lsquo;-i'使修改生效<br/>
a. 将old替换为new： sed &rsquo;s/old/new/g&rsquo; file -i<br/>
b. 删除第四行： sed &lsquo;4 d&rsquo; file<br/>
c. 在第三行后添加一行： sed &lsquo;3 a xxx&rsquo; file<br/>
d. 在第三行前添加一行： sed &lsquo;3 i xxx&rsquo; file</p>

<h3>find和grep</h3>

<p>在.c文件中查找东西：find -name &lsquo;*.c&rsquo; | xargs grep &lsquo;xxx&rsquo;</p>

<h3>gcc编译时指定小端-EL</h3>

<p>mips-linux-gnu-gcc -g -O2 -Wall -EL test.c</p>

<h3>watch</h3>

<p>检测一个命令的运行结果，默认2S间隔重复运行命令，用-n参数指定时间间隔: watch
free</p>

<h3>usermod</h3>

<p>查看用户所属的组：groups user     <br/>
添加用户到某个组：usermod -a -G groupA user</p>

<h3>&amp;&amp;和||</h3>

<p>command1 &amp;&amp; command2 当command1执行成功才执行command2     <br/>
command1 || command2 当command1执行不成功才执行command2</p>
]]></content>
  </entry>
  
</feed>
